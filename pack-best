#! /bin/sh
show_version() {
	wr <<- .
	$APP version 10.350

	(c) 2010 by Guenther Brunthaler.\n
	Distribution is permitted under the terms of the GPLv3.
.
}


show_help() {
	wr <<- .
	$APP - determine the best packer for each file argument and pack it
	
	Usage: $APP [ options ] file1 ...
	
	$APP packs each specified file with all supported packers and
	finally selects the shortest file to remain (if no packer could make
	a file shorter than the original, the original will remain unpacked.)
	
	Options:

	-O: (like "Oscar" - not the digit zero) Overwrite archives.\n
	    By default, no files will ever be overwritten.\n
	-k: Keep the original.\n
	    Normally it is replaced by the winner. (Unless the original *is*
	    the winner.)\n
	-e: Always include "extreme" packing settings within the list of
	    comparison test candidates.\n
	    Warning: This can take REALLY REALLY long for large archives!\n
	-E <bytes>: Set threshold for automatically using -e for short files.
	    For all files shorter than this size, -e will enabled
	    automatically. The default is -E $EXTREME_THRESHOLD.
	    Use -E 0 to disable automatic selection of -e entirely.\n
	-2: Includes second choice packers like "lzma" in the tests.\n
	    "lzma" is nearly identical to "xz" but does not add any checksum
	    to the packed file. Which means there is no reliable way to verify
	    the consistency of a packed file. Damaged packed files might
	    therefore decompress to rubbish without any errors. (The same is
	    actually also true for "gzip", but in that case there are no
	    better alternatives.)\n
	    Use this option only if squeezing out every single byte is
	    important! It is also only of interest for rather short files,
	    because in large files the space savings for the checksums becomes
	    completely insignificant in comparison to the overall file size.\n
	-v: Be verbose. Shows more details of the tests.\n
	-h: Show this help.\n
	-V: Show only the version information.\n
.
	println
	show_version
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" || die "Could not execute >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


println() {
	run printf '%s\n' "$*"
}


wr() {
	local REPLY
	while IFS= read -r
	do
		{
			while test -n "$REPLY" || IFS= read -r
			do
				ORIG=$REPLY; REPLY=${REPLY%\\n}
				println "$REPLY"
				test x"$ORIG" != x"$REPLY"  && break
				REPLY=
			done
		} | run fmt -w "$LINEWIDTH" || exit
	done
}


have() {
	which "$1" > /dev/null 2>& 1
}


size() {
	system stat -c %s -- "$1"
}


write_ok() {
	test -e "$1" && {
		test -n "$OVERWITE_ARCHIVES" \
			|| die "Output file '$1' already exists!" \
				"Use -o to enable overwriting."
	}
}


try_better() {
	local OUT EXTREME
	test x$1 = x-e && { EXTREME=${TRY_EXTREME:+$2}; shift 2; }
	OUT=$IN.$1
	test -n "$EXTREME" && {
		try_better "$@" $EXTREME
		test -e "$OUT" && {
			# Extreme settings were best so far.
			EXTREME=$OUT.extreme
			# Move out of the way.
			write_ok "$EXTREME"
			run mv "$OUT" "$EXTREME"
			# Retry with normal settings.
			try_better "$@"
			if test -e "$OUT"
			then
				# Normal settings better than extreme ones.
				run rm "$EXTREME"
			else
				# Extreme settings still better.
				mv "$EXTREME" "$OUT"
			fi
			return
		}
	}
	shift
	write_ok "$OUT"
	test -n "$VERBOSE" && run printf 'Testing "%s"...\t' "$OUT"
	run cat "$IN" | run "$@" | run cat > "$OUT"
	size "$OUT"
	test -n "$VERBOSE" && {
		run printf '(%10s bytes with %s)\n' "$REPLY" "$*"
	}
	if test "$REPLY" -lt "$SHORTEST"; then
		run test "$REPLY" -gt 0
		SHORTEST=$REPLY
		test -n "$BEST" && run rm "$BEST"
		BEST=$OUT
	else
		run rm "$OUT"
	fi
}


pack() {
	local IN BEST SHORTEST REPLY TRY_EXTREME
	IN=$1
	run test -f "$IN"
	size "$IN"; SHORTEST=$REPLY
	if test $SHORTEST -lt $EXTREME_THRESHOLD
	then
		TRY_EXTREME=Y
	else
		TRY_EXTREME=$TRY_EXTREME_SETTINGS
	fi
	test -z "$VERBOSE" && {
		run printf 'Testing "%s" (%s bytes)...\n' "$IN" "$SHORTEST"
	}
	test -n "$HAVE_LZO" && try_better lzo lzop -9
	test -n "$HAVE_GZ" && try_better gz gzip -9
	test -n "$HAVE_BZ2" && try_better bz2 bzip2 -9
	test -n "$HAVE_XZ" && try_better -e -e xz xz -9
	test -n "$INCLUDE_2ND_CHOICE_PACKERS" && {
		test -n "$HAVE_LZMA" && try_better -e -e lzma lzma -9
	}
	if test -n "$BEST"; then
		test -n "$KEEP_ORIGINAL" || rm "$IN"
	else
		BEST=$IN
	fi
	echo "Shortest is $BEST ($SHORTEST bytes)."
}


LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}
APP=${0##*/}
INCLUDE_2ND_CHOICE_PACKERS=
TRY_EXTREME_SETTINGS=
KEEP_ORIGINAL=
VERBOSE=
OVERWITE_ARCHIVES=
EXTREME_THRESHOLD=500000
HAVE_LZO=
HAVE_GZ=
HAVE_BZ2=
HAVE_LZMA=
HAVE_XZ=
while getopts keE:2vOhV OPT
do
	case $OPT in
		O) OVERWITE_ARCHIVES=Y;;
		k) KEEP_ORIGINAL=Y;;
		e) TRY_EXTREME_SETTINGS=Y;;
		E) run test $OPTARG -ge 0; EXTREME_THRESHOLD=$OPTARG;;
		2) INCLUDE_2ND_CHOICE_PACKERS=Y;;
		v) VERBOSE=Y;;
		h) show_help; exit;;
		V) show_version; exit;;
		*) false; exit;;
	esac
done
shift `expr $OPTIND - 1`
have lzop && HAVE_LZO=Y
have gzip && HAVE_GZ=Y
have bzip2 && HAVE_BZ2=Y
have lzma && HAVE_LZMA=Y
have xz && HAVE_XZ=Y
for FILE
do
	pack "$FILE"
done
