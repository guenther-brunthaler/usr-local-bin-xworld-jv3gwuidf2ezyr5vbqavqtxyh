#! /bin/sh
show_version() {
	cat <<- .
	$APP version 10.203

	(c) 2010 by Guenther Brunthaler.
	Distribution is permitted under the terms of the GPLv3.
.
}


show_help() {
	cat <<- .
	$APP - determine the best packer for each file argument and pack it
	
	Usage: $APP [ options ] file1 ...
	
	$APP packs each specified file with all supported packers and
	finally selects the shortest file to remain (if no packer could make
	a file shorter than the original, the original will remain unpacked.)
	
	Options:

	-o: Overwrite archives. Normally, no files will ever be overwritten.
	-k: Keep the original. Normally it is replaced by the winner.
	-e: Use extreme packing settings. Warning: This can take REALLY long!
	-O: Includes outdated packers like LZMA in the tests.
	-v: Be verbose. Shows the command used to run the packer.
	-h: Show this help.
	-V: Show only the version information.

.
	show_version
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" || die "Could not execute >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


size() {
	system stat -c %s -- "$1"
}


try_better() {
	local OUT EXTREME INFO
	test x$1 = x-e && { EXTREME=$2; shift 2; }
	test -n "$TRY_EXTREME_SETTINGS" && test -n "$EXTREME" && {
		set -- "$@" $EXTREME
	}
	OUT=$IN.$1; shift
	test -e "$OUT" && {
		test -n "$OVERWITE_ARCHIVES" \
			|| die "File '$OUT' already exists!" \
				"Use -o to enable overwriting."
	}
	run printf 'Testing "%s"...\t' "$OUT"
	run cat "$IN" | run "$@" | run cat > "$OUT"
	size "$OUT"
	test -n "$VERBOSE" && INFO=" with $*"
	run printf '(%10s bytes%s)\n' "$REPLY" "$INFO"
	if test "$REPLY" -lt "$SHORTEST"; then
		run test "$REPLY" -gt 0
		SHORTEST=$REPLY
		test -n "$BEST" && run rm "$BEST"
		BEST=$OUT
	else
		run rm "$OUT"
	fi
}


pack() {
	local IN BEST SHORTEST REPLY
	IN=$1
	run test -f "$IN"
	size "$IN"; SHORTEST=$REPLY
	try_better gz gzip -9
	try_better bz2 bzip2 -9
	try_better -e -e xz xz -9
	test -n "$INCLUDE_OUTDATED_PACKERS" && try_better -e -e lzma lzma -9
	if test -n "$BEST"; then
		test -n "$KEEP_ORIGINAL" || rm "$IN"
	else
		BEST=$IN
	fi
	echo "Shortest is $BEST ($SHORTEST bytes)."
}


APP=${0##*/}
INCLUDE_OUTDATED_PACKERS=
TRY_EXTREME_SETTINGS=
KEEP_ORIGINAL=
VERBOSE=
OVERWITE_ARCHIVES=
while getopts keOvohV OPT
do
	case $OPT in
		o) OVERWITE_ARCHIVES=Y;;
		k) KEEP_ORIGINAL=Y;;
		e) TRY_EXTREME_SETTINGS=Y;;
		O) INCLUDE_OUTDATED_PACKERS=Y;;
		v) VERBOSE=Y;;
		h) show_help; exit;;
		V) show_version; exit;;
		*) false; exit;;
	esac
done
shift `expr $OPTIND - 1`
for FILE
do
	pack "$FILE"
done
