#! /bin/sh
exit_version() {
	wr << ===; exit
$APP Version 2025.25
Copyright (c) 2025 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}

exit_help() {
	wr << ===; echo; exit_version
$APP - de-duplicate names in a list read from standard input

Usage: $APP [ <options> ... ] [ -- ] < name_id_list.txt

$APP deduplicates IDs which must be in the first column of the list of names
 (the second column) read from standard input.

Both columns must be separated by exactly one ASCII space.

Typically, IDs will be inode numbers or file content checksums of some kind.

The program then prints a shell script to standard output which, if executed,
 will delete all files within each group except for the one with the shortest
 name. $APP on its own will not try to delete anything.

The input does not be sorted. Lines with unique IDs will be ignored, because
 in this case there is nothing to be de-duplicated.

The names in the 2nd column may contain spaces and special shell characters;
 $APP will quote such names automatically as required in the generated script.

Supported options:

-w: Specify that there will be a third column in the input, between the
 'ID'-column and the 'name'-column. This third column must contained signed
 integer values representing a weight for that entry. This weight rather than
 the string length will then be used for determining the order in which
 entries within each duplicates-group will be sorted. In the generated shell
 the line which sorts as first will be kept, and all the remaining lines will
 be deleted.

-h: show this help and exit

-V: show version information and exit
===
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

wr() {
	{
		unterminated=false
		while IFS= read -r line
		do
			if test "${line%" "}" != "$line"
			then
				echo TRAILING
				false || exit
			fi
			test "${line#" "}" = "$line" && $unterminated && echo
			printf '%s' "$line"
			unterminated=true
		done
		$unterminated && echo
	} | fold -sw $LINEWIDTH
}
LINEWIDTH=`tput cols || echo ${COLUMNS:-66}`

weights=false
while getopts whV opt
do
	case $opt in
		w) weights=true;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

# Quote $1 if necessary for using as an argument for a command in a POSIX
# shell.
qin() {
	if expr x"$1" : x'[-_%^/=+,.:[:alnum:]]\{1,\}$' > /dev/null
	then
		:
	else
		set -- "$1" "'"
		set -- "$1" "s/$2/$2\\\\$2$2/g"
		set -- "`printf '%s\\n' "$1" | sed "$2"`"
		set -- "'$1'"
	fi
	printf '%s\n' "$1"
}

if $weights
then
	weights=weight
else
	weights=
fi
while IFS=' ' read -r id $weights n
do
	test "$weights" || weight=${#n}
	printf '%s %s %s\n' "$id" "$weight" "$n"
done \
| LC_COLLATE=C sort -k1,1n -k2,2n \
| {
	# Remove groups consisting of just a single unique entry.
	id1= output_rest=false
	while IFS=' ' read -r id2 s2 n2
	do
		if test "$id2" = "$id1"
		then
			if test $output_rest = false
			then
				printf '%s %s %s\n' "$id1" $s1 "$n1"
				output_rest=true
			fi
		else
			output_rest=false
		fi
		if $output_rest
		then
			printf '%s %s %s\n' "$id2" $s2 "$n2"
		fi
		id1=$id2 s1=$s2 n1=$n2
	done
} \
| {
	lid=
	while IFS=' ' read -r id s n
	do
		n=`qin "$n"`
		if test "$id" != "$lid"
		then
			test "$lid" && echo
			echo "#Keep $n."
			lid=$id
		else
			echo "rm -- $n"
		fi
	done
}
