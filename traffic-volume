#! /bin/sh

# Displays the current up- and download counters (as bytes) for all network
# interfaces since the interfaces where brought up. When feeding a former
# output of the script to via standard input to itself, displays the traffic
# produced since then instead.
#
# For the latter case only, a list of network interfaces to show may be
# specified either as multiple arguments or separated by arbitraty
# non-alphanumeric separators (except for "_" and "-" which will not be
# recognized as separators) within one or more arguments. If interfaces are
# specified in this way as arguments, they will always be reported even if
# the interface does not currently exist. In this case, it will be assumed to
# exist with all traffic counters set to zero.
#
# $this_script > snap.txt # Snaphot the starting counters.
# $this_script < snap.txt # Display counter differences for all interfaces.
# $this_script eth0 < snap.txt # Display only differences for interface eth0.
# $this_script eth0 lo < snap.txt # Display only for interfaces eth0 and lo.
# $this_script eth0,lo < snap.txt # Same.
# $this_script eth0+lo < snap.txt # Same.
# $this_script "eth0 & lo" < snap.txt # Same.
# $this_script "eth0 "&" lo" < snap.txt # Same.
# $this_script "eth0, lo" < snap.txt # Same.
# $this_script "eth0 :: lo" < snap.txt # Same.
#
# Version 2023.230
#
# Copyright (c) 2009-2023 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

only_ifcs=
verbose=0
byte_exact=0
while getopts bv opt
do
	case $opt in
		b) byte_exact=1;;
		v) verbose=1;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

report() {
	{
		export LC_ALL=C PATH=/sbin:/usr/sbin:/usr/local/sbin:"$PATH"
		ifconfig -a 2> /dev/null || :
	} | awk -v now=`date +%s` -v explicit="$*" -f /dev/fd/5 5<< '.'
		function z() {
			r= t= 0; ifc= noifc
		}

		function p() {
			if (noifc == ifc) return
			print ifc "," now "," r "," t
			if (ifc in missing) delete missing[ifc]
			z()
		}

		function schedule_missing(    t, i) {
			if (i= split(explicit, t, "[^-_[:alnum:]]{1,}")) {
				while (i) missing[t[i--]]= 1
			}
		}

		BEGIN {noifc= ""; z(); schedule_missing()}

		/^[^:[:space:]]+:/ {
			p()
			ifc= substr($0, 1, index($0, ":") - 1)
		}

		$1 ~ "[RT]X" && /bytes/ {
			v= 0
			for (i= 1; i <= NF; ++i) {
				if ($i ~ /^[0-9]+$/ && $i > v) v= $i
			}
			if ($1 == "RX") r= v; else t= v
		}

		function add_missing(    mif) {
			for (mif in missing) {
				ifc= mif; p()
			}
		}

		END {p(); add_missing()}
.
}

if test -t 0
then
	report "$*"
	exit
fi
{
	cat
	echo
	report "$*"
} \
| {
	awk -v bx=$byte_exact -v details=$verbose -v only="$*" \
		-F, -f /dev/fd/5 5<< '.'

	BEGIN {
		split("bytes" (bx ? "" : ",kB,MB,GB,TB,PB,EB,ZB,YB,RB,QB"), u)
		if (i= split(only, t, "[^-_[:alnum:]]{1,}")) {
			while (i) ifc_ok[t[i--]]= 1
			only= 1
		}
		split("seconds,60,minutes,60,hours,60,days,24,weeks,7", t)
	}

	$1 == "" {phase= 2; next}
	
	phase != 2 {
		ifc= $1
		for (i= 2; i <= NF; ++i) {
			if (i == 2 && v[ifc, i] > $i) break
			v[ifc, i]= $i
		}
		next
	}
	
	{
		ifc= $1
		if (only && !(ifc in ifc_ok)) next
		if (!((ifc, 2) in v)) next
		for (i= 2; i <= NF; ++i) v[ifc, i]= $i - v[ifc, i]
		details= details ? sprintf( \
			" (%s read, %s written)" \
			, fmt(v[ifc, 3]), fmt(v[ifc, 4]) \
		) : ""
		printf \
			"%s: %s total%s" \
			" since your snapshot from %s ago.\n" \
			, ifc, fmt(v[ifc, 3] + v[ifc, 4]) \
			, details, tfmt(v[ifc, 2])
	}
	
	function fmt(bytes    , i) {
		for (i= 1; i + 1 in u && bytes > 1000; ++i) bytes/= 1000
		bytes= sprintf("%.2f", bytes)
		sub(/[.]0*$/, "", bytes)
		return bytes " " pl(bytes, u[i])
	}
	
	function pl(count, unit) {
		if (count == 1) sub(/s$/, "", unit)
		return unit
	}
	
	function tfmt(seconds    , ts, i, v) {
		for (i= 1; seconds && i in t; i+= 2) {
			if (v= seconds % t[i + 1]) {
				if (ts != "") ts= " " ts
				ts= v " " pl(v, t[i]) ts
			}
			seconds= int(seconds / t[i + 1])
		}
		if (ts == "") ts= seconds " " pl(seconds, t[1])
		return ts
	}
	
.
} | {
	c=`locale -k decimal_point`
	decimal_point='.'; eval "$c"
	sed -e "s/[.]\([0-9]\)/$decimal_point\1/g"
}
