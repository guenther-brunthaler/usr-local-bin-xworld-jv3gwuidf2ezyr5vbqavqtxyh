#! /bin/sh
show_version() {
	cat <<- .
	$APP version 12.108.3

	(c) 2012 by Guenther Brunthaler.
	This source file is free software.
	Distribution is permitted under the terms of the GPLv3.
.
}


show_help() {
	cat << EOF
$APP - replacement for "write" as local text-chat with readline support

Usage:
	$APP -s [ <client2inform> ]
	$APP -c <server2contact>

$APP is an alternative to using "write" for chatting with another user
(or with oneself in a different terminal) on the same machine.

The advantage over "write" is that $APP provides readline editing support,
including an editing history during the chat.

$APP can only be used for simple chats involving two participants; it
cannot be used for group chats with three or more participants.

The user who initiates the chat must run $APP with the -s ("server")
option, which creates a PTY as a rendezvous point for joining the chat.

The other user must run $APP with the -c ("client") option, specifying
the path to the PTY which the first user has created.

$APP will automatically inform the second user of the PTY to be used
if <client2inform> is specified by the first user; otherwise the first user
has to inform the second user by some external means such as e-mail.

<client2inform> is normally a user name, and "write" will be used to send a
message to that user instructing the user how to join the chat.

However, <client2inform> can also be the path to a local tty oder pty, in
which case the message will be directly written to that terminal.

This allows for testing of $APP by "chatting" between two different
terminal windows even from the very same user.

Options:

-s [ <client2inform> ]: Server mode. Initiate a chat, creating a PTY. The
client needs the know the PTY device in order to connect to the chat server.
If <client2inform> is missing, the PTY is just printed to stdout and the
initiator has to relay this information somehow to the client (e. g. by
e-mail). If <client2inform> is present and contains a "/", it is assumed to be
a path to the client's TTY. In this case, a message will be written to that
TTY, informing the client how to connect to the chat. Otherwise,
<client2inform> is assumed to be the client's user name on the local machine,
and "write" will be used to inform the client how to connect to the chat.

-c <server2contact>: Client mode. Connect to an existing chat as a client,
specifying the chat server's PTY device path as the argument.

-h: Display this help
-V: Display version info

SECURITY CAVEAT:

This is *not* a secure chat. EVERYONE from the local machine can connect to a
running chat server, pretending to be the chat buddy who the chat originator
is expecting to connect. Be aware of that risk!

PGP signed text should be pasted into the chat console where authenticity of
the sent information is important.

Also note that "write" has exactly the same security limitations; everyone can
write a message to the victim's tty pretenting to have been created by "write"
on behalf of a different user.
EOF
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" || die "Could not execute >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


coremsg2client() {
	cat << EOF
Please execute the command

\$ $APP -c $SERVER

in order to start a chat with user $ORIGINATOR!

If the "$APP" script is not installed, the following command
can be used as an alternative to achieve the same effect:

\$ socat OPEN:$SERVER,echo=0 READLINE,prompt='self> '

In either case, you can cancel the chat at any time by pressing ctrl-c.
EOF
}


msg2server() {
	echo
	echo "Please relay the following message to the client:"
	echo
	echo "---BEGIN MESSAGE---"
	coremsg2client
	echo "---END MESSAGE---"
}


msg2client() {
	echo
	echo
	echo "*************"
	echo "MESSAGE FROM USER $ORIGINATOR:"
	echo
	echo "---BEGIN MESSAGE---"
	coremsg2client
	echo "---END MESSAGE---"
	echo
	echo "(Press Enter to get a prompt again.)"
	echo "*************"
}


APP=${0##*/}
MODE=
while getopts cshV OPT
do
	case $OPT in
		c) MODE=client;;
		s) MODE=server;;
		h) MODE=help;;
		V) MODE=version;;
		*) false; exit
	esac
done
shift `expr $OPTIND - 1`
PEER=$1; shift
if
	test x$MODE = x"help" || test $# != 0 || {
		test -z "$PEER" && test x$MODE != x"server"
	}
then
	show_help
	echo
	show_version
	test x$MODE = x"help"; exit
elif test x$MODE = x"version"
then
	show_version
	exit
fi
system which socat; SOCAT=$REPLY
if test x$MODE = x"client"
then
	echo
	echo "Connecting to the chat server on PTY \"$PEER\"..."
	echo
	echo "(Start typing your message. You can cancel the chat at any time"
	echo "by pressing ctrl-c.)"
	echo
	run test -c "$PEER"
	exec "$SOCAT" OPEN:$PEER,echo=0 READLINE,prompt='self> '
	die "Could not exec $SOCAT to act as a chat client!"
fi
run test x$MODE = x"server"
system tempfile; T=$REPLY
trap 'false; exit' USR1
PARENT=$$
{
	while :
	do
		test -e "$T" || exit
		test -L "$T" && break
		sleep 1
	done
	trap "kill -USR1 $PARENT" 0
	system readlink "$T"; SERVER=$REPLY
	run test -c "$SERVER"
	system whoami; ORIGINATOR=$REPLY
	case $PEER in
		*/*)
			run test -c "$PEER"
			msg2client > "$PEER" || exit
			echo "The client has been informed."
			;;
		"")
			msg2server || exit
			;;
		*)
			msg2client | write "$PEER" || exit
			echo "The client has been informed."
	esac
	echo
	echo "Now wait until the client connects to this chat!"
	echo "(You can cancel the chat at any time by pressing ctrl-c.)"
	echo
	trap - 0
} &
exec "$SOCAT" READLINE,prompt='self> ' PTY,link=$T
