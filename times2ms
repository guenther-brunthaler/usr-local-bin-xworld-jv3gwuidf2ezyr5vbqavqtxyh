#! /bin/sh
exit_version() {
	cat << ===; exit
$APP version 2025.126.1
Copyright (c) 2025 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}
APP=${0##*/}

exit_help() {
	cat << ===; echo; exit_version
$APP - parse output of "times" and convert "user" time into milliseconds

Usage:
$ (command_1 && command_2 ...; times) | $APP

$APP parses to output of the "times" utility. It extracts the user time spent
by child processes of the current shell, converts it to an integral number of
milliseconds and displays this value.

The advantage of using "$APP" rather than "times" directly lies in the fact
that "$APP" displays integer values which can easily be subtracted, sorted or
compared with "expr". They can be sorted without consideration of the current
locale, because the result will not contain a decimal point.

Example:

\$ proctime=\$((stress-ng --timeout=2s --cpu=\`nproc\` --quiet; times) | $APP)
\$ echo \$proctime

Supported command line options:

-h: Display help and exit.
-V: Display version information and exit.
===
}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

while getopts hV opt
do
	case $opt in
		V) exit_version;;
		h) exit_help;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

convert2ms() {
	v=$1
	if test "$thousands_sep"
	then
		v=`printf '%s\n' "$v" | tr -d "$thousands_sep"`
	fi
	if test "$decimal_point"
	then
		v=`printf '%s\n' "$v" | tr "$decimal_point" .`
	fi
	expr "$v" : '[0-9]\{1,\}m[0-9]\{1,\}\.[0-9]*s$' > /dev/null
	m=`expr "$v" : '\([0-9]\{1,\}\)m' || :`
	s=`expr "$v" : '[^m]*m\([0-9]\{1,\}\)' || :`
	f=`expr "$v" : '[^.]*\.\([0-9]*\)s$' || :`
	if test ${#f} -gt 3
	then
		while test ${#f} != 4
		do
			f=${f%?} # Shorten fractional part to 4 decimal places.
		done
		f=`expr $f + 5` || : # Round.
		f=${f%?} # Shorten rounded fractional part to 3 decimal places.
		test "$f" || f=0
	fi
	expr \( $m \* 60 + $s \) \* 1000 + $f || :
}

get_locale() {
	locale=$1; shift
	n=$#
	while test $n != 0
	do
		set -- "$@" "$1="; shift
		n=`expr $n - 1 || :`
	done
	n=$IFS
	IFS=' '; printf '%s\n' "$*"
	IFS='|'; rx="^($*)"
	IFS=$n
	locale -kc "$locale" 2> /dev/null | grep -E "$rx"
}

test $# = 0

eval `get_locale LC_NUMERIC decimal_point thousands_sep`

read usr sys # Ignore times of the shell.
# echo shell usr=$usr sys=$sys >& 2
read usr sys # Times of the shell's children.
# echo "shell's children usr=$usr sys=$sys" >& 2
convert2ms "$usr"
