#! /bin/sh
helper=ssh-config-alias-resolver
# Accept a list of arguments for the host/alias-argument of "ssh", looks up
# the resulting hostname, user and port for each argument in parallel from
# ~/.ssh/config, and prints the result as "git remote add"-commands. Does not
# actually invoke "ssh" or access the network in any way. The actual work is
# done by $helper. All options which make sense for passing through will be
# accepted and passed through to $helper.
#
# Version 2018.205
#
# Copyright (c) 2018 Guenther Brunthaler. All rights reserved.
# 
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e
trap 'test $? = 0 || echo "$0 failed!" >& 2' 0

# Quote $OPTARG.
qarg() {
	OPTARG=`printf '%s\n' "$OPTARG" | sed "$qarx"`
}
qarx='s|'\''|'\\\''|g; s/.*/'\''&'\''/'

ho= # Options passed through to $helper.
subcmd=add
pull=`pwd`
push=$pull
execute=false
init_remote=false
while getopts ixsuUPC:p:l: opt
do
	case $opt in
		i) init_remote=true;;
		x) execute=true;;
		s) subcmd=set-url;;
		p | C | l) qarg; ho="$ho -$opt $OPTARG";;
		U | P | u) ho="$ho -$opt";;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

if command -v git > /dev/null 2>& 1
then
	if
		head=`git symbolic-ref HEAD 2> /dev/null` \
		&& test "$head" \
		&& branch=${head#refs/heads/} \
		&& test "$branch" != "$head" \
		&& remote=`git config --local "branch.$branch.remote"` \
		&& test "$remote" \
		&& url=`git config --local remote.local.url` \
		&& test "$url"
	then
		case $url in
			/*) push=/${url##/};;
			file://*) url=/${url##file://}; push=/${url##/}
		esac
	fi
	if
		test "${push%.git}" = "$push" \
		&& test -d "$push" \
		&& test "`cd "$push" && git config --local core.bare`" = true
	then
		push=$push.git
	fi
fi
for vn in push pull
do
	eval var=\$$vn
	t=${var#"$HOME"}; test "$t" != "$var" && var="/~$t"
	eval $vn=\$var
done

show_or_exec() {
	if $execute
	then
		echo "EXECUTING: $@"
		"$@"
	else
		echo "SIMULATION: $@"
	fi
}

process() {
	show_or_exec git remote "$@"
}

first=true
"$helper"$ho -- "$@" \
| while IFS=: read -r name user host port
do
	if $first
	then
		set -f; first=false
	else
		echo
	fi
	if $init_remote
	then
		url=${push#"/~/"}
		set +f
		show_or_exec ssh${port:+ -p "$port"}${user:+ -l "$user"} \
			git init --bare "$url"
		set -f
		$execute && continue
	fi
	url="ssh://$user${user:+"@"}$host${port:+:}$port"
	set +f; process $subcmd "$name" "$url$pull"; set -f
	test "$push" = "$pull" && continue
	set +f; process set-url --push "$name" "$url$push"; set -f
done
