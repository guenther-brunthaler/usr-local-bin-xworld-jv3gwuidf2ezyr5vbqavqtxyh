#! /bin/sh
exit_version() {
	wr << ===; exit
$APP Version 2023.228
Copyright (c) 2021-2023 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}

exit_help() {
	case $selection in
		primary) selection='primary X11 selection';;
		*) selection='X11 clipboard'
	esac
	wr << ===; echo; exit_version
$APP - pipe text from/to the $selection to/from standard output/input

Usage 1: $APP [ -x | -c ] [ -g | -f ] | <command> ...
Usage 2: <command> | $APP [ -x | -c ] [ -s | -t | -p ]
Usage 3: $APP [ -x | -c ] [ -a ] [ -- ] <argument_1> ...

The first usage pipes data from to $selection to <command>.

The second usage replaces the current contents of the $selection with the
 output of <command>.

The third usage sets the concatenation of all arguments, with a newline
 character appended after every argument, as the new contents of the
 $selection. In other words, it puts every argument on its own line within the
 $selection.

The third usage is the default if any non-option arguments are present.

Without any arguments, the default usage depends on the name of the command
 '$APP' (or a symlink to it) which has been used to run '$APP'. The presence
 of absence of the letters "s" or "x" in the name of '$APP' determines the
 default usage.

The presence of letter "s" implies option -s, otherwise -g. The presence of
 letter "x" implies -x, otherwise -c. Explicit options can always be used to
 override those defaults.

Example: Replace the contents of the $selection with a base-64 encoded version
 of its current contents:

\$ $APP -g | base64 | $APP -s

Supported options:

-a: ("Arguments".) Enforce usage variant 3 (write arguments to $selection),
 even if no arguments are present. Instead, set the $selection to an empty
 string in the latter case, containing not even a lone newline character.

-c: ("Clipboard".) Use the X11 clipboard rather than the primary X11 selection
 for the specified operation. This is the default unless the name of the
 command '$APP' contains the letter 'x'.

-x: ("X11 Selection".) Use the primary X11 selection rather than the X11
 clipboard for the specified operation. This is the default if the name of the
 command '$APP' contains the letter 'x'.

-g, -f: ("Get", "From".) Get data from $selection and write to standard
 output. This is the default unless the name of the command '$APP' contains
 the letter "s".

-s, -t, -p: ("Set", "To", "Put".) Set data read from standard input as new
 $selection contents. This is the default if the name of the command '$APP'
 contains the letter "s".

-h: show this help and exit

-V: show version information and exit
===
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

wr() {
	{
		unterminated=false
		while IFS= read -r line
		do
			test "${line%" "}" = "$line"
			test "${line#" "}" != "$line" && unterminated=false
			$unterminated && echo
			printf '%s' "$line"
			unterminated=true
		done
		$unterminated && echo
	} | fold -sw $LINEWIDTH
}
LINEWIDTH=`tput cols || echo ${COLUMNS:-66}`

case $APP in
	*s*) get=false;;
	*) get=true;;
esac
case $APP in
	*x*) selection=primary;;
	*) selection=clipboard;;
esac

write_args=false
while getopts axcgfstphV opt
do
	case $opt in
		a) write_args=true;;
		x) selection=primary;;
		c) selection=clipboard;;
		[gf]) get=true;;
		[stp]) get=false;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

all=true
pkg=
for need in xclip
do
	case $need in
		*:) pkg=${need%:};;
		*)
			: ${pkg:="$need"}
			command -v -- "${need}" > /dev/null 2>& 1 || {
				echo
				echo "Required utility '$need' is missing!"
				echo "On some systems it can be installed with"
				echo "\$ sudo apt-get install $pkg"
				all=false
			} >& 2
			pkg=
	esac
done
$all || exit

case $#:$write_args in
	0:false)
		if $get
		then
			xclip -o -selection $selection
		else
			xclip -i -selection $selection
		fi
		;;
	0:true) : | xclip -i -selection $selection;;
	*) printf '%s\n' "$@" | xclip -i -selection $selection
esac
