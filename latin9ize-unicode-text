#! /bin/sh
# Invoke "sed" (passing through any -i option) with predefined string
# transformation which tries to substitute non-LATIN9 UNICODE characters with
# LATIN9 replacement characters. Also, sequences of non-breaking space,
# horizontal tabulation and similar whitespace characters will be replaced by
# a single space character.
#
# Version 2018.235
# Copyright (c) 2017-2018 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e

pipelines_wait() {
	local worst rc pid timeout
	worst=0; timeout=${2:-1}
	for pid in $BG_PIDS
	do
		if test "$1"
		then
			{
				sleep $timeout; kill -$1 $pid || :
				while :
				do
					sleep 999
				done
			} & timeout=$!
			{
				wait $pid && :
				rc=$?
				kill -TERM $timeout || :
				wait $timeout || :
				exit $rc
			} & pid=$!
		fi
		wait $pid && :
		rc=$?
		test $rc -gt $worst && worst=$rc
	done
	BG_PIDS=
	return $worst
}

cleanup() {
	rc=$?
	pipelines_wait TERM || :
	test "$TD" && rm -r -- "$TD"
	case $rc in
		0) return;;
		126) how="when attempting to run a non-executable file";;
		127) how="because a command was not found";;
		*)
			how="with signal `kill -l $rc 2> /dev/null`" \
			|| how="with return code $rc"
	esac
	echo "$0 failed $how!" >& 2
}
TD=
BG_PIDS=
trap cleanup 0
trap 'exit $?' INT TERM QUIT HUP

verify_posint_arg() {
	expr x"$OPTARG" : x'[1-9][0-9]*$' > /dev/null
}

opts=
crad=10 # Context radius.
pos=
while getopts ip:c: opt
do
	case $opt in
		i) opts="$opts -$opt";;
		p) verify_posint_arg; pos=$OPTARG;;
		c) verify_posint_arg; crad=$OPTARG;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

if test "$pos"
then
	test $# = 0 && set /dev/stdin
	cbef=`expr $crad \& $pos \> $crad \| $pos || :`
	cdia=`expr $cbef + $crad`
	rbs=8192
	while test $rbs -lt $cdia
	do
		rbs=`expr $rbs + $rbs`
	done
	bo=`expr $pos - $cbef || :`
	bi=`expr $bo / $rbs || :`; bo=`expr $bo % $rbs || :`
	lb=`
		dd if="$1" bs=$rbs skip=$bi count=1 \
		| dd bs=1 skip=$bo count=$cdia
	` 2> /dev/null
	pfx=`printf '%s\n' "$lb" | dd bs=1 count=$cbef` 2> /dev/null
	echo "<...>$pfx<AFTER_THIS>${lb#"$pfx"}<...>"
	exit
fi

TD=`mktemp -d -- "${TMPDIR:-/tmp}/${0##*/}".XXXXXXXXXX`

get_fifo() {
	case $2 in
		"" | +)
			eval fifo=\$NX_FIFO_$1
			case $2 in
				+) fifo=`expr $fifo + 1`
			esac
			;;
		*) fifo=$2
	esac
	test "$2" && eval NX_FIFO_$1=\$fifo
	fifo=$TD/$1_$fifo
	test -e "$fifo" || mkfifo -- "$fifo"
}

pipeline_start() {
	local fifo
	get_fifo $1 1; shift
	"$@" > "$fifo" & BG_PIDS="$! $BG_PIDS"
}

pipeline_cont() {
	local lfifo fifo
	get_fifo $1; lfifo=$fifo; get_fifo $1 +; shift
	"$@" < "$lfifo" > "$fifo" & BG_PIDS="$! $BG_PIDS"
}

pipeline_complete() {
	local fifo
	get_fifo $1; shift
	"$@" < "$fifo" & BG_PIDS="$! $BG_PIDS"
}

substs=`
iconv -f UTF-7 << 'EOF'
s/+AFsAWw:space:+AF0AoABdAFwAew-1,+AFwAfQ-/ /g
s/+AF4 //
s/ +ACQ-//
s/+ICY-/.../g
s/+IBQ-/ - /g
y/+IDogOQCrALsgHSAcIB4gEyAZIBgAtA-/+ACIAIgAiACIAIgAiACI--'''/
y/+IAY-/ /
y/+A7w-/+ALU-/
y/+AUIBGQEfAQ0BRA-/legcn/
EOF
`
pipeline_start 1 sed$opts "$substs" "$@"
pipeline_cont 1 iconv -t LATIN9
pipeline_complete 1 iconv -f LATIN9
pipelines_wait TERM 5
