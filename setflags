#! /bin/sh

# Version information located farther below.
case $1 in
	fast_cpu_wholefamily) # release (recommended for normal use)
		CFLAGS="-D NDEBUG -O2 -mtune=native"
		LDFLAGS="-s -Wl,-O1,--as-needed,--hash-style=gnu"
		;;
	fastest_cpu_wholefamily) # release
		CFLAGS="-D NDEBUG -O3 -mtune=native"
		LDFLAGS="-s -Wl,-O1,--as-needed,--hash-style=gnu"
		;;
	smallest_cpu_wholefamily) # release
		CFLAGS="-D NDEBUG -Os -mtune=native"
		LDFLAGS="-s -Wl,-O1,--as-needed,--hash-style=gnu"
		;;
	posix) # release (only POSIX-guaranteed options)
		CFLAGS="-D NDEBUG -O"
		LDFLAGS="-s"
		;;
	debug) # debug
		CFLAGS="-O0 -ggdb3"
		LDFLAGS=
		;;
	devel) # debug with maximum warnings and protectors
		CFLAGS="-O0 -ggdb3 -Wall -Wextra -Wpedantic"`:
			`" -D _FORTIFY_SOURCE=2 -fstack-protector-strong"
		LDFLAGS=
		;;
	fastest_cpu_specific) # release
		CFLAGS="-D NDEBUG -O3 -march=native"
		LDFLAGS="-s -Wl,-O1,--as-needed,--hash-style=gnu"
		;;
	smallest_cpu_specific) # release
		CFLAGS="-D NDEBUG -Os -march=native"
		LDFLAGS="-s -Wl,-O1,--as-needed,--hash-style=gnu"
		;;
	gdb)
		alias gdb="gdb -iex 'add-auto-load-safe-path $PWD'"
		;;
	geninit)
		 cat <<- '======' > .gdbinit
file ./sum
b *main
# Example how to set arguments and redirection:
r 1 2 3 > sum_output.txt
# Alternative to redirection in "run" command, also redirects stdin and stderr:
#tty /dev/pts/17
#set directories /basepath/to/src/files
set history size 500
set history save on
set scheduler-locking on
#layout asm
layout src
focus cmd
======
		;;
	mfsimple)
		 cat << '======' > Makefile
.POSIX:

# You may redefine these settings via the "make" command line or export them
# as environment variables and (in the latter case only) also
# "export MAKEFLAGS=e". Or just edit this file.

CFLAGS = -D NDEBUG -O
LDFLAGS = -s

# No need to redefine these.
TARGETS = myprog

.PHONY: all clean

all: $(TARGETS)

clean:
	-rm $(TARGETS)
======
		;;
	mflibs)
		 cat << '======' > Makefile
.POSIX:

# You may redefine these settings via the "make" command line or export them
# as environment variables and (in the latter case only) also
# "export MAKEFLAGS=e". Or just edit this file.
CPPFLAGS = -D NDEBUG
CFLAGS = -O
LDFLAGS = -s

# No need to redefine these.
LIBS = -lm

TARGETS = myprog

.PHONY: all clean

all: $(TARGETS)

clean:  
	-rm $(TARGETS)

AUG_CFLAGS = $(CPPFLAGS) $(CFLAGS)
AUG_LDFLAGS = $(LDFLAGS) $(LIBS)

.c:
	$(CC) $(AUG_CFLAGS) -o $@ $< $(AUG_LDFLAGS)
======
		;;
	reset)
		unset export CFLAGS CPPFLAGS CXXFLAGS LDFLAGS MAKEFLAGS
		unalias gdb 2> /dev/null || :
		return
		;;
	help | *)
		echo "${0##*/} Version 2025.239"
		sed 's|^[[:space:]]*\(.*\)) \(#.*\)'`:
			`'|set \1 \&\& . '"${0##*/}"' \&\& make \2|;'`:
			`' t; d' "$0" \
		| while read -r setting
		do
			echo "\$ make clean && $setting"
		done
		echo "\$ set reset && . ${0##*/}" \
			"# reset all customized settings"
		echo "\$ set gdb && . ${0##*/}" \
			"# Define alias 'gdb' which allows gdb to be" \
			"invoked from unsafe '.'"
		echo "\$ set geninit && . ${0##*/}" \
			"# Create customizable template ./.gdbinit"
		echo "\$ set mfsimple && . ${0##*/}" \
			"# create customizable simple POSIX-compliant Makefile"
		echo "\$ set mflibs && . ${0##*/}" \
			"# create customizable POSIX-compliant Makefile" \
			"using libraries"
		echo "\$ sh ${0##*/} # THIS help"
		return
esac
CFLAGS="$CFLAGS -pipe"
case $* in
	*" -P") MAKEFLAGS=1;; # Set -P as 2nd argument for non-parallel builds.
	*)
		MAKEFLAGS=`
			nproc \
			|| getconf _NPROCESSORS_ONLN 2> /dev/null \
			|| echo 1
		`
		MAKEFLAGS=`expr $MAKEFLAGS + 1`
esac
MAKEFLAGS=-e`
	case $MAKEFLAGS in
		1) exit
	esac
	make --help 2>& 1 \
	| sed 's/^[[:space:]]*-\\([jl]\\)[[:space:]]\\{1,\\}.*/ -\\1'\`:
		\`$MAKEFLAGS'/; t;'\`:
		\`' s/.*[[:space:]]\\{1,\\}\\(--output-sync\\).*/ \\1/;'\`:
		\`' t; d' \
	| paste -sd ''
`
export CPPFLAGS= CFLAGS LDFLAGS MAKEFLAGS
unset CXXFLAGS
