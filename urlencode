#! /bin/sh
# URL-encodes any number of string arguments. Reads the strings from standard
# input if not arguments are provided. This is a transactional utility: Either
# all arguments will have been converted successfully, or none will be output
# if any of the conversions should fail.
#
# If option -p is specified, all strings must be absolute or relative
# pathnames of existing filesystem objects and will be converted to absolute
# 'file://'-URLs. "." and ".." will be resolved before conversion. The
# conversion will fail if any "." or ".." components remain in the pathnames
# because they could not be resolved.
#
# If -u if specified, strings which start with what looks like an URL prefix
# will be passed through unmodified (and untested in case of -p).
#
# Version 2021.32.1
#
# Copyright (c) 2012-2021 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

keep='-A-Za-z0-9/_.~'

set -e
cleanup() {
	rc=$?
	test "$TF" && rm -- "$TF"
	test $rc = 0 || echo "\"$0\" failed!" >& 2
}
TF=
trap cleanup 0
trap 'exit $?' INT QUIT TERM HUP

paths=false
url_passthrough=false
while getopts up opt
do
	case $opt in
		u) url_passthrough=true;;
		p) paths=true;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

println() {
	printf '%s\n' "$*"
}

cleanabspath() {
	sed -f /dev/fd/5 5<<- ===
		s|$|/|; s|/\{2,\}|/|g
		:1
			s|/[.]/|/|g
		t 1
		:2
			s|/[^/]\{1,\}/[.][.]/|/|g
		t 2
		s|.*/[.]\{1,2\}/.*||
		s|\(/.*\)/$|\1|
===
}

# Verfies / resolves path $1, but only if $paths == true.
# Uses: $cwd.
# Returns: $n.
# Trashes: $n2.
process_path() {
	n=$1
	test $paths = false && return
	if
		test ! -e "$n" && {
			n=`println "$n" | cleanabspath`
			test -z "$n" || test ! -e "$n"
		}
	then
		echo "Pathname '$1' does not exist!" >& 2
		false || exit
	fi
	case $n in
		/*) ;;
		*) n=$cwd/$n
	esac
	if
		n2=`println "$n" | cleanabspath`
		test "$n2" && test -e "$n2"
	then
		n=$n2
	elif
		n2=`readlink -f -- "$n" | cleanabspath`
	then
		n=$n2
	else
		echo "Cannot resolve pathname '$1'!" >& 2
		false || exit
	fi
}

# Determines whether $1 looks like an URL, but only if $url_passthrough !=
# false.
url_bypass() {
	case $url_passthrough in
		false) false || return
	esac
	expr x"$1" : x'[a-z]\{2,10\}://.' > /dev/null || return
}

# Uses $cwd if $paths == true.
# Trashes: $n, $n2.
prepare() {
	n=$1
	if url_bypass "$n"
	then
		:
	else
		process_path "$n"
	fi
	println "$n"
}

TF=`mktemp -- "${TMPDIR:-/tmp}/${0##*/}".XXXXXXXXXX`
case $paths in
	true) cwd=`pwd`
esac
case $# in
	0)
		while IFS= read -r n
		do
			prepare "$n"
		done
		;;
	*)
		for n
		do
			prepare "$n"
		done
esac > "$TF"

pct_enc() {
	tr -d '\n' | od -vt x1 | cut -d ' ' -f 2- | head -n -1 \
		| tr 'a-f ' 'A-F\n' | sed 's/../%&/g' | tr -d '\n'
	echo
}

rxm() {
	LC_COLLATE=C expr x"$1" : x"$2" || :
}

# Consumes: $left.
# Returns: $out.
encode() {
	out=
	while :
	do
		out=$out`rxm "$left" '\(['"$keep"']*\)'`
		left=`rxm "$left" '['"$keep"']*\(.*\)'`
		case $left in
			'') break
		esac
		out=$out`rxm "$left" '\([^'"$keep"']*\)' | pct_enc`
		left=`rxm "$left" '[^'"$keep"']*\(.*\)'`
		case $left in
			'') break
		esac
	done
}

while IFS= read -r left
do
	if url_bypass "$left"
	then
		out=$left
	else
		encode
		case $paths in
			true) out=file://$out
		esac
	fi
	println "$out"
done < "$TF"
