#! /bin/sh

# Replaces all hexadecimal key fields in all dmsetup "crypt" table entries
# with new full-entropy keys.
#
# This can be used to refresh keys after some time, or replace keys which
# might have been compromised. Another usage is to create new keys using the
# original ones as templates when cloning a whole-system image where the clone
# shall use different keys.
#
# The entropy for the new keys will be obtained by calling an external helper
# executable "$truerand" (see the definition below for its actual name).
#
# This helper expects a decimal octet count (octets are 8-bit bytes) as its
# only argument and shall write that many binary full-entropy true-random
# octets (i.e. not just cryptographically secure pseudorandom-octets) to
# standard output.
#
# If no such executable exists, it is also possible to temporarily define a
# shell function with this name and "export -f" it before calling THIS script.
#
# This script can either be used as a filter where it reads dmsetup table
# contents from standard input, replaces the keys of any "crypt" lines, and
# writes the modified tables to standard output.
#
# Or a bunch of *.table files can be specified as arguments, containing the
# stored contents of dmcrypt tables. In this case, for every argument a new
# file with ".table" replaced by "-new.table" will be created, containing a
# copy of the original file except that all keys will have been replaced with
# new ones.
#
# v2023.279

truerand=keygen-octets-by-harvesting-entropy

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

force=false
while getopts f opt
do
	case $opt in
		f) force=true;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

replace_keys() {
	awk -v keygen=\""$truerand"\" -f /dev/fd/5 5<< '===' -- ${1+"$@"}

	$3 == "crypt" && $5 ~ /^[[:xdigit:]]+$/ {
		n = length($5)
		if (n % 2) die()
		b = n / 2
		c = keygen " " b " | od -A n -vt x1 | tr -dc '[:xdigit:]'"
		c | getline nk
		close(c)
		if (length(nk) != n) die()
		$5 = nk
	}

	{print}
	
	function die() {
		exit system("false")
	}

===
}

new_name() {
	old=${1%.table}
	test "$old" != "$1"
	new=$old-new.table
	if test -e "$new"
	then
		$force
	fi
	dir=`dirname -- "$new"`
	test -d "$dir"
	printf '%s\n' "$new"
}

check_args() {
	while test $# != 0
	do
		new_name "$1"
		shift
	done
}

# Check whether awk is modern enough and supports named RegEx classes.
echo 9aA | awk '!/^[[:xdigit:]]+$/ {exit system("false")}'

case $# in
	0) replace_keys; exit;;
esac
check_args ${1+"$@"}

for f
do
	o=`new_name "$f"`
	replace_keys < "$f" > "$n"
done
