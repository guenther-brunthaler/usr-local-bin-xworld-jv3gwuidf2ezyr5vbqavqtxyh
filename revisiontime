#! /bin/sh
show_version() {
	wr -s <<- .
	$APP version 13.100.9

	(c) 2010 - 2013 by Guenther Brunthaler.
	Distribution is permitted under the terms of the GPLv3.
.
}


show_help() {
	wr -s <<- .
	$APP - synthesize a version number from the current date/time

	Usage: $APP [ options ]
	       $APP [ options ] -
	       $APP [ options ] <lastrevision>
	       $APP -f
	       $APP -f <lastrevinfofile>
	       $APP -F <templatefilename>
.
	wr <<- .

	$APP is a tool for generating revision ("version") numbers.
		
	$APP can either be used to increment existing revision numbers,
	generate revision numbers from date and time, or combine both methods.

	When called without an argument (besides options) and neither with
	option -f/-F, $APP just prints a revision number based on date/time as
	follows:
	
	The current UTC date/time is used as a "version number", i. e. as a
	sequence of integer number components separated by dots (".").

	First component: 4-digit year minus 2000.
	
	Second component: Day within year ("cal -j").
	
	Third component (only with option '-3'): Time of day 1 - 999.

	Date / time is always interpreted as UTC only! This will create
	revision numbers that can be globally compared without being affected
	by the local time zone setting.

	If an argument (besides) options is provided, or if the -f/-F option
	is used, $APP switches to a different mode where it tries to update an
	existing version number.

	If -f/-F has been specified, the old revision number will be read from
	a file, and the new revision number will be written back to the same
	file in addition of printing it.
	
	When using option -f, if there is an argument, it will be used as the
	file name where to read the old revision number from and replace it
	with the new revision number.
	
	When using option -F, and only if there is an argument, the argument
	fill be transformed into the actual file name to be used (like in -f)
	as follows: First, any filename extension will be stripped. Then the
	string "$extFs" (if the stripped basename of the filename contains a
	space character) or "$extFu" (does not contain a space character) will
	be appended. The result will be used as the filename for storing the
	revision number.
	
	Option -F is useful in a Makefile where pseudo-variable "\$@" can be
	used as the filename argument for -F in a rule, which will
	automatically synthesize filename for storing the revision number from
	the name of the rule target.
.
	local exf; exf=Makefile
	wr <<- .	

	As an example, here is a "$exf" which can be used to run the
	"asciidoc" documentation generator on two files "file 1.asciidoc" and
	"file_2.asciidoc", using different revision numbers for both files
	(kept in files "file 1$extFs" and "file_2$extFu") which are only
	updated if "make" needs to update one of the generated .html files:
.
	local sep; sep=-----
	cat <<- . | cut -c2-
	|
	|$sep begin example: $exf $sep
	|HTMLS = file\ 1.html file_2.html
	|TARGETS = \$(HTMLS)
	|
	|all: \$(TARGETS)
	|
	|.PHONY: all clean
	|.SUFFIXES: .asciidoc .html
	|
	|.asciidoc.html:
	|	asciidoc -a revnumber=\`$APP -F "\$@"\` -o "\$@" "\$<"
	|
	|clean:
	|	-rm \$(TARGETS)
	|$sep end example $sep
.
	local ex1 ex2; ex1="\$ $APP -h | sed -e '0,/example: "
	ex2="/ d; /end example/,\$ d'"
	wr <<- .

	Hint: You can copy the above example into a real $exf with the
	following command:
	
	$ex1$exf$ex2 > $exf
.
	exf=GNUmakefile
	wr <<- .	
	
	Next is a very similar example for a "$exf" which auto-detects all the
	"asciidoc" input files in the current directory and all of its
	subdirectories, but it only works with GNU make and requires a
	UNIX-like shell and the external commands "find" and "sed":
.
	local sed; sed="sed -e 's, ,\\\\ ,g'"
	cat <<- . | cut -c2-
	|
	|$sep begin example: $exf $sep
	|ASCIIDOCS = \$(shell find -type f -name "*.asciidoc" | $sed)
	|HTMLS = \$(patsubst %.asciidoc,%.html,\$(ASCIIDOCS))
	|TARGETS = \$(HTMLS)
	|
	|all: \$(TARGETS)
	|
	|.PHONY: all clean
	|.SUFFIXES: .asciidoc .html
	|
	|.asciidoc.html:
	|	asciidoc -a revnumber=\`$APP -F "\$@"\` -o "\$@" "\$<"
	|
	|clean:
	|	-rm \$(TARGETS)
	|$sep end example $sep
.
	wr <<- .

	Hint: You can copy the above example into a real $exf with the
	following command:
	
	$ex1$exf$ex2 > $exf

	Obviously it is very dangerous to accidentally use -f instead of -F in
	such a "Makefile", because -f would overwrite the specified target
	file instead of deriving the file name to use from it.
	
	Therefore a safeguard has been built into -f/-F: If the provided
	filename refers to an existing file, its size is checked, and if the
	size exceeds a limit, the -f/-F option and the filename are ignored
	completely. The allowed maximum file size used in the check defaults
	to $MAX_INFOSIZE bytes and can be changed with the -S option.
	
	But there is another problem: The Makefile will run revisiontime -F
	not only when the source file has changed, but also when the target
	file is missing. We do not want to increment the revision number in
	this case!
	
	Therefore, -F performs an additional checks: It the specified filename
	(before transformation!) refers to a file which does not exist and the
	revision number save file does exist, then -F reads the revision
	number from the save file, but does not try to update it. Instead, it
	just prints the old revision and exits. This is also done if the
	revision number save file exists and is newer than the target file.
	This check avoids bumping the revision more than once if the target
	fails to be built for some reason at the first attempt.
	
	Note that only -F can perform this additional check, because -f has no
	idea what the name of the target file could be.
        	
	If no argument is present when -f/-F us used, the filename '$INFOFILE'
	(in the current directory) is used.
	
	It is not a problem if this file is actually missing; this will then
	work as if no old revision has been specified, but will still write
	the new revision to the file, thus creating it. (All this is only done
	if the -f/-F option is used!)
	
	If no -f/-F is used and there is a single argument which is "-", $APP
	reads the previous revision number from standard input.
	
	Otherwise, if no -f/-F if used the argument itself is assumed to be
	the previous revision number.
	
	How $APP tries to update the old revision number depends on whether
	or not option "-s" has also been specified:
	
	* Without -s, $APP assumes the old revision number is date/time based
	  and will also generate a date/time-based new number. If the same
	  date/time is already part of the old number, however, it switches to
	  "sequential mode" and uses a third component which is an increasing
	  integer.
	
	* With -s, $APP does not care about date/time and just tries to
	  increment the last component of the old revision number. In other
	  words, it uses thee "classic" way to increment the old revision
	  number.
	
	There is a subtle difference between using "-" and providing the old
	version number directly on the command line: In the former case, the
	trailing newline after printing the new revision number will be
	suppressed.
	
	This allows $APP to be used as a filter from within your editor: Just
	select the old version number inside its line as a block, pipe the
	contents of the selected block through the command "$APP -", and
	replace the selected block by the output of the command.
	
	On the other hand, if the trailing newline at the output is desired
	nevertheless, the "-n" option can be specified to enforce it.


	Options:

	-3: Display a three-component number rather than a two-component one.
	    This increases the granularity of purely date/time-based revision
	    numbers from 1 day to about 1.5 minutes. Note that it might be a
	    better idea to not use this option and specify the previous
	    revision number as an argument instead, which will just use a
	    simple counter as a third component if necessary.

	-s: Produce "classic" sequential version numbers rather than the
	    default date/time based ones. Without this option, a hybrid mode
	    is used: The first revision on a day will be a 2-component
	    revision number only based on the date. Further revisions on the
	    same day will use a third component as a counter. Therfore, using
	    -s is not necessary to create a counter as a third component. Use
	    it only if you never ever want to use date-based version numbers.
	    
	-n: When "-" is specified as an argument, output of a newline
	    character after writing the new revision number would normally be
	    suppressed. This option disables this suppression, so the newline
	    will be written even in this case.

	-f: Instead of trying to read the previous revision number from
	    standard input or use the command line argument as the previous
	    revision, the previous revision number is read from and the new
	    revision number will be written to a file (in addition to printing
	    it). If -f us used and a command line argument is present, it is
	    used as the file name where the latest version number should be
	    stored. If no command line argument is given, the name of the file
	    defaults to "$INFOFILE".
	    
	-F: This does the same as -f, except that a filename which is actually
	    specified on the command line is interpreted differently. In this
	    case, and only in this case, the specified filename is interpreted
	    as a template which needs to be transformed into the real file
	    name to use rather than using it directly. The following
	    transformation will then be applied in this case on the name:
	    First, if the file has a filename extension, it will be stripped.
	    Then the string "$extFs" (if the stripped basename of the filename
	    contains a space character) or "$extFu" (does not contain a space
	    character) will be appended. The result is the filename which will
	    actually be used for storing the revision number. -F is intended
	    for use in Makefiles. It assumes that the specified name (before
	    the transformation) refers to the (single) target of the Makefile
	    rule. It also checks whether the target exists, and avoids bumping
	    the revision number read from the file with the transformed name
	    if the target did not exist. In that case, it just reads and
	    returns the last revision number unchanged. This means that
	    building a non-existing target will not bump the revision number;
	    only updating an outdated target file will (assuming the source
	    file must have been updated). Also, a failed attempt to update the
	    target file will neither bump the revision: If the revision number
	    save file is newer than the target file, a revision bump is also
	    suppressed.

	-S <maxsize>: In order to avoid overwriting an important file when the
	    wrong file name was accidentally used as an argument to -f or -F,
	    a sanity check is performed on the revision number save file if it
	    already exists: It must not be larger than the limit which can be
	    set with the -S option, which defaults to $MAX_INFOSIZE bytes.
	    Otherwise, the -f/-F option as well as the file name fill be
	    ignored, and nothing will be read or written at all.

	-h: Show this help.

	-V: Show only the version information.

	The revision numbers produced by $APP will only have day granularity
	if neither the -3 option nor the previous revision number was
	specified. This should be enough if updates of the versioned entity
	are not too frequent.
	
	For allowing sub-day granularity, the -3 option or the previous
	revision number can be specified for the following scenarios:
	
	* Specifying the previous allows to generate 2-component date-based
	  revision numbers by default. But if more than 1 revision is
	  generated for the same day, a third component is appended which is a
	  simple integer counter.

	* "-s" generates "classical" sequential revision numbers. It only
	  cares about the last component of the previous revision number and
	  increments it by 1.
	
	* "-3" generates a third component only from the time of day. No
	  knowledge of the previous revision number is required or honored.

	The usage variants where the previous revision number is specified can
	only be used if the last emitted revision number is known. Those
	variants are therefore restricted to scenarios where a central
	authority issues the revision numbers, or where there is at least some
	protocol in place which allows the team members to co-ordinate
	emission of new revision numbers. Both options are therefore not well
	suited for truly distributed development.
	
	The -3 option is the choice for distributed teams where different team
	members can release new versions at any time, and does not require any
	co-ordination between team members.
	
	However, I recommend using the default variant where possible: Use a
	date-based revision number for the first revision, then always use the
	default mode to generate new date-based revision numbers for new
	revision or append a counter for additional revisions created on the
	same day.
	
	This has the advantage that the new revision number is first and
	foremost a date.
	
	But it still allows sub-day granularity by adding an integer counter
	as a third component, where "<year>-<day>" is interpreted the same as
	"<year>-<day>-0". Therefore, a revision "13.37" means the same as
	"13.37.0", and thus the next revision (for the same day only) will be
	"13.37.1". $APP would therefore generate the following sequence of
	revision numbers for that day: "13.37", "13.37.1", "13.37.2" etc.

	Actually, how the default mode really works is as follows: It first
	generates a 2-component date-based revision number. Then it compares
	this number to the provided last revision number. If the specified
	last revision number has different leading component numbers than the
	newly generated revision number, then a new day has come and the new
	2-component number is used directly. Otherwise, another revision for
	the current day shall be generated, and a third compontent ".1" is
	added, or an already existing third component is incremented.

	The "-s" option is used	to generate "classical" revision numbers: It
	checks wheter the end of the specified old revision number looks like
	the last component of a revision number, and if so, increments it.
	
	If the old revision is an empty string, generates "1" as the new revision.
	
	If the old revision number is a non-empty string but its end does not
	look like the last component of a revision number, it is assumed there
	is no revision number there yet and "-1" is addes to the string in
	order to create the first numbered revision.
	
	To clarify the expression "looks like the last component of a revision
	number": If the old revision ends with a substring that can be
	interpreted as an integer, it is assumed to be the last component of a
	revision number. It does not matter which version component
	separators, if any, precede the integer suffix.
	
	Here are some examples which old revision numbers lead to which new
	revision numbers generated by "-s": "13.37" -> "13.38", "test-62" ->
	"test-63", "1.0.9" -> "1.0.10", "heck" -> "heck-1", "42" -> "43", "v5"
	-> "v6", "r246" -> "r247", "" -> "1", "mytools-alpha-7.2.3.9" ->
	"mytools-alpha-7.2.3.10".
	
	As one can see, it does not matter whether the old "revision number"
	is actually a full package name whith a trailing version number - it
	works as well.

	The -3 option will typically not be used if version numbers are
	assigned by a single person only (or by a central authority). In such
	cases it will be much easier to just increment an integer as the third
	component.
	
	For instance, let's say $APP returned a two-component revision number
	of 10.204 for the first revision on that day. This number is then used
	directly for that first revision. When another revision number is
	required, the developer notices that $APP still generates 10.204 and
	therefore adds a third component, making it 10.204.1. The next
	revision on that day will be 10.204.2, 10.204.3 and so on.
	
	But things are different when a team of developers is working on a
	project in a fully distributed fashion, and multiple team members are
	entitled to release new versions at any time with no permanent
	synchronization between team members.
	
	In this case, it is best to *not* use incremental integers as the
	third component, but rather the -3 option of $APP.
	
	This will generate the third component based on the current universal
	time, where the third component increments approximately in two-minute
	intervals.
	
	This means there is only a very small chance that two team members
	release a new version with the same revision number even without any
	further co-ordination than agreeing to use $APP to generate revision
	numbers.
	
	How is the third component calculated?
	
	First, the current UTC time is broken down into hours, minutes and
	seconds. Then this is converted into the number of seconds since
	midnight. In this calculation, it is assumed that a minute can have 62
	seconds (60 normal seconds plus up to 2 leap seconds just to be sure).
	
	The resulting number is then mapped linearly into the range 1 to 999.
	(This means the third component will always be within the bounds of
	that range.)

.
	show_version
}


wr() {
	test -z "$*" && set -- -c
	fmt -w "$LINEWIDTH" "$@"
}
LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}


APP=${0##*/}
OREV=
MODE=l
NL=
OPT_F=
INFOFILE=current-revision.txt
MAX_INFOSIZE=25
extFs=' - revnum.txt'
extFu=_revnum.txt
while getopts 3sfFS:nhV OPT
do
	case $OPT in
		3 | s) MODE=$OPT;;
		f) OPT_F=Y;;
		F) OPT_F=template;;
		S) MAX_INFOSIZE=$OPTARG;;
		n) NL='\n';;
		h) show_help; exit;;
		V) show_version; exit;;
		*) false; exit;;
	esac
done
shift `expr $OPTIND - 1`
if test -n "$OPT_F"
then
	target=
	if test -n "$1"
	then
		INFOFILE=$1
		set --
		if test x"$OPT_F" = x"template"
		then
			target=$INFOFILE
			INFOFILE=${target%.*}
			case ${INFOFILE##*/} in
				*" "*) INFOFILE=$INFOFILE$extFs;;
				*) INFOFILE=$INFOFILE$extFu
			esac
		fi
	fi
	if test -f "$INFOFILE"
	then
		sz=`LC_ALL=C stat -c '%s' "$INFOFILE"`
		if test $sz -le $MAX_INFOSIZE
		then
			set -- `cat "$INFOFILE"`
		else
			echo "WARNING: '$INFOFILE' is too large -" \
				"ignoring it!" >& 2
			INFOFILE=
		fi
	fi
	if
		test -n "$INFOFILE" && test -n "$1" \
		&& test -n "$target" && {
			test ! -e "$target" || {
				vmtime=`stat -c '%Y' "$INFOFILE"`
				tmtime=`stat -c '%Y' "$target"`
				test ${vmtime:-0} -gt ${tmtime:-0}
			}
		}
	then
		exec printf "%s$NL" "$1"
	fi
else
	INFOFILE=
fi
if test x"$1" = x"-" && test -z "$INFOFILE"
then
	read OREV
else
	OREV=$1
	NL='\n'
	test -z "$1" && test x"$MODE" = x"l" && MODE=
fi
r=`
	LC_ALL=C; export LC_ALL
	echo "\`date -u '+%Y %j %H %M %S'\` $MODE $OREV" | awk '{
		three= ""; r= $1 - 2000 "." $2 + 0
		if ($6 == "3") {
			three= "." int( \
				(($3 * 60 + $4) * 62 + $5) * (1000 - 1) \
				/ (24 * 60 * 62) \
				+ 1 \
			)
		} else if ($6 == "l" && index($7, r) == 1) {
			if ("x" r == "x" $7) three= ".1"
			else $6= "s"
		}
		if ($6 == "s") {
			if (match($7, "[0-9]+$")) {
				r= substr($7, 1, RSTART - 1)
				three= substr($7, RSTART) + 1
			} else {
				r= $7
				three= r == "" ? 1 : -1
			}
		}
		print r three
	}'
`
test -n "$INFOFILE" && printf '%s\n' "$r" > "$INFOFILE"
exec printf "%s$NL" "$r"
