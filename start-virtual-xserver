#! /bin/sh
show_version() {
	wr <<- .
	$APP version 11.200

	Copyright (c) 2007-2011 Guenther Brunthaler. All rights reserved.\n
	This source file is free software.\n
	Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}


show_help() {
	wr <<- .
	start-virtual-xserver - start virtual X server for SSH/TightVNC

	Launches a virtual frame-buffer X11 server, to be controlled with
	vncviewer of the TightVNC package either locally or via an SSH tunnel.
	
	Usage: start-virtual-xserver [options]
	
	options:\n
	--size <WxH>, -s <WxH>:\n
	  Specify width and height of the virtual display in pixels. Defaults
	  to 1024x768.\n
	--depth <bits>, -d <bits>:\n
	  Bit-depth of the virtual display. Defaults to 24.\n
	--interface <ifnam>, -i <ifname>:\n
	  Specify a host interface to listen for connections. By default, $APP
	  will only listen on the local loopback interface (localhost).
	--help, -h: Display this help text.\n
	--verbose, -v: Verbose operation.\n
	--dry-run, --simulate, -n:\n
	  Just print what would be done, but don't actually do anything.
.
	println
	show_version
}
                                                                                                                             

die() {
	{
		echo "ERROR: $*"
		echo "Use $APP --help for help."
	} >& 2
	false; exit
}


run() {
	"$@" && return
	die "Command >>>$*<<< failed return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


println() {
	run printf '%s\n' "$*"
}


wr() {
	local REPLY
	while IFS= read -r REPLY
	do
		{
			while test -n "$REPLY" || IFS= read -r REPLY
			do
				ORIG=$REPLY; REPLY=${REPLY%\\n}
				println "$REPLY"
				test x"$ORIG" != x"$REPLY"  && break
				REPLY=
			done
		} | run fmt -w "$LINEWIDTH" || exit
	done
}
LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}
                                                        

# Start of command line processing.
# Define presets.
VERBOSE=0
DRY=0
SIZE=1024x768
DEPTH=24
IFC=
#
COPTS=
while :
do
	if test -z "$COPTS"
	then
		case $1 in
			-?*) COPTS=$1; shift;;
			*) break;;
		esac
	fi
	if test x"${COPTS#--}" = x"$COPTS"
	then
		TAIL=${COPTS#-?}; # Switch clustering.
		COPT=${COPTS%$TAIL}; COPTS=${TAIL:+-}$TAIL
	else
		COPT=$COPTS; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case "$COPT" in
		--) break;; # Must be first!
		--interface | -i) IFC=$1; shift;;
                --help | -h) show_help; exit;;
		--version | -V) show_version; exit;;
		--verbose | -v) VERBOSE=1;;
		--dry-run | --simulate | -n) DRY=1;;
		--size | -s) SIZE=$1; shift;;
		--depth | -d) SIZE=$1; shift;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off ordinal arguments.
#test $# -ge 1 && { WORKDIR="$1"; shift; }
#test $# -ge 1 || die "Missing argument - limit for accumulated sum!"
#LIMIT="$1"; shift
# Check for excess arguments.
test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.
set --
test $DRY = 1 && set -- "$@" exec echo "WOULD RUN:"
echo "Launching virtual X11-Server ($SIZE with 2 ** $DEPTH colors)."
set -- "$@" vncserver -geometry $SIZE -depth $DEPTH
if test -n "$IFC"
then
	set -- "$@" -interface "$IFC"
else
	set -- "$@" -localhost
fi
set -- "$@" -nolisten tcp
unset XAUTHORITY
run "$@"
wr <<- EOF
Now set your \$DISPLAY variable accordingly!\n
For instance, if the above lines said\n
>>>New 'X' desktop is hostname:1<<<\n
then enter the following commands now:\n
\$ DISPLAY=:1\n
\$ export DISPLAY\n
This will allow you to launch X applications on the virtual server
from the command line, such as\n
\$ xclock &\n
\$ xterm &

Hint: If you want to control your shiny little frame-buffer server
with TightVNC's 'vncviewer' through an SSH tunnel, be sure to connect
to this machine with a statement like\n
\$ ssh -L5900:localhost:5901 user@host\n
where the '5901' equates 5900 + the number in \$DISPLAY,
i. e. the '1' in ':1'.

Also consider running the script\n
\$ tightvnc-via-local-ssh-forwarding\n
instead of running 'vncviewer' directly, which invokes
vncviewer with suitable parameters for JPEG-compression and
SSH tunneling.
EOF
