#! /bin/sh
show_version() {
	wr <<- .
	$APP version 11.26.1

	(c) 2010 - 2011 by Guenther Brunthaler.\n
	Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}


show_help() {
	wr <<- .
	$APP - split a patch into multiple incremental patches, one hunk per
	patch
	
	Usage: $APP [ options ] <patch>
	
	$APP determines the number of hunks present in <patch>, and then
	creates a numbered set of patch files as output where each patch file
	contains a single hunk from <patch>.
	
	When those generated patch files are then applied later in
	lexicographical order, they will have the same effect as applying
	<patch>.
	
	The names of the output files are based on <patch> and a numeric
	index; $APP will display the names as it creates the files.
	
	$APP will never overwrite any files - it will abort with an error
	message if an output file already exists.


	Options:

	-R: Assume the patch will be applied reverted, i. e. with the -R or
	    --reverse option to 'patch'.\n
	    In this case, $APP will enumerate the output files in the reverse
	    order, i. e. the patch with the last hunk will get a name so it
	    will be applied first when using shell wildcard expansion for
	    specifying the patch files later.
	-h: Show this help.\n
	-V: Show only the version information.\n
.
	println
	show_version
}


die() {
	printf "ERROR: %s\n" "$*" >& 2
	false; exit
}


run() {
	"$@" && return
	die "Could not execute >>>$*<<< return code ${?}!"
}


system() {
	REPLY=`run "$@"` || exit
}


println() {
	run printf '%s\n' "$*"
}


wr() {
	if
		test $# != 0
	then
		run printf '%s\n' "$*" | wr
		return
	fi
	local REPLY
	while IFS= read -r REPLY
	do
		{
			while test -n "$REPLY" || IFS= read -r REPLY
			do
				ORIG=$REPLY; REPLY=${REPLY%\\n}
				println "$REPLY"
				test x"$ORIG" != x"$REPLY"  && break
				REPLY=
			done
		} | run fmt -w "$LINEWIDTH" || exit
	done
}
LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}


cleanup() {
	rm "$T"
}


getchunk() {
	run cat "$PATCH" | run filterdiff "-#$1" | run cat > "$2"
}


REVERSED=
while getopts RhV OPT
do
	case $OPT in
		R) REVERSED=Y;;
		h) show_help; exit;;
		V) show_version; exit;;
		*) false; exit;;
	esac
done
shift `expr $OPTIND - 1`
LC_ALL=C
TZ=UTC0
export LC_ALL TZ
PATCH=${1?Argument required: The patch to be split into chunks!}
run test -f "$PATCH"
system tempfile; T=$REPLY
trap cleanup 0
HUNK_COUNT=0
while :
do
	I=`expr $HUNK_COUNT + 1`
	getchunk $I "$T"
	test -s "$T" || break
	HUNK_COUNT=$I
done
if
	test $HUNK_COUNT = 0
then
	die "There is only a single hunk; use the patch as it is!"
fi
FORMAT='%s-part_%0'${#HUNK_COUNT}'u.patch'
case $PATCH in
	*[-._]patch) PREFIX=${PATCH%?patch};;
	*[-._]diff) PREFIX=${PATCH%?diff};;
	*) PREFIX=$PATCH
esac
I=1
while :
do
	system printf "$FORMAT" "$PREFIX" $I; NAME=$REPLY
	if
		test -n "$REVERSED"
	then
		X=`expr $HUNK_COUNT + 1 - $I`
	else
		X=$I
	fi
	wr "Extracting hunk # $X into the following file:" >& 2
	println "$NAME"
	test -e "$NAME" && die "Output file already exists - delete it first!"
	getchunk $X "$NAME"
	test $I = $HUNK_COUNT && break
	I=`expr $I + 1`
done
REVERSED=${REVERSED:+ reverted (i. e. with -R or --reverse)}
wr <<- EOF >& 2
	Successfully split patch '$PATCH' into $HUNK_COUNT smaller patches
	which are to be applied$REVERSED in lexicographical order of the
	filenames.
EOF
