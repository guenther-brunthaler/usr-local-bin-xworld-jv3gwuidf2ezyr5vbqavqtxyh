#! /bin/sh
exit_version() {
	wr -s << . && exit
$APP version 2018.183

Copyright (c) 2018 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}

default_bits=4096
exit_help() {
	wr << . && echo && echo && exit_version
$APP - a safer ssh-keygen

Usage: $APP [ <options> ... ] <keyname_1> ...

$APP does the same job like "ssh-keygen", only safer: ssh-keygen gets its
random numbers from /dev/urandom, which does not provide any guarantee about
quality.

Depending on the implementation and the current state of the system, "random"
numbers from /dev/urandom may be of poor quality, deterministic or even be
completely predictable.

$APP emulates ssh-keygen's behaviour regarding key generation, but uses
/dev/random for gathering the required random bytes. Contrary to /dev/urandom,
/dev/random always returns high-quality random numbers with sufficient entropy
- which is exactly what one usually wants for cryptographic keys.

However, there is a caveat when using /dev/random: If will block as long as it
takes to generate high-quality random numbers, which may be a really long
time.

Therefore it is recommended to install package "rng-tools" (for feeding data
from a hardware random number generator into /dev/random), "haveged" (if no
hardware RNG is available, it feeds CPU/cache timing variations into
/dev/random), or some other kind of entropy gathering daemon before running
$APP.

Options:

-b <bits>: Generate <bits> RSA keys rather than the default of $default_bits
bits.

-e: Ask for individual pass phrases for all the private keys. By default, the
keys are stored unencrypted. Obviously, the default requires/assumes that the
filesystem of the current directory (where the generated keys will be stored)
is secure/encrypted. When in doubt, better use -e.

-p: In addition to generating OpenSSH private/public key files, also create a
copy of the private key in PuTTY format as a .ppk file. This requires the
program "puttygen" to be installed. Note that if you also selected option -e,
you will have to enter an encryption pass phrase for OpenSSH and another
(possible different one) one for PuTTY. Because every pass phrase needs to be
repeated for verification, this means a total of 4 pass phrases needs to be
entered for every key to be generated.

-V: Display version information and exit.

-h: Display this help and exit.

$APP creates the key in two phases: First it creates all the keys as temporary
files, which might take some time.

In the second phase it asks for pass phrases for all the keys, unless the u
-option has been specified to skip this step. Only after that, the private
keys are copied to their requested locations.

$APP creates its temporary files in /tmp by default. But you can set the
environment variable \$TMPDIR in order to override this and specify another
directory where $APP shall create its temporary files.

For instance, you could set \$TMPDIR to point to a temporarily mounted
filesystem of type "ramfs", which (contrary to "tmpfs") will never be swapped
out to disk (except when executing hibernate-to-disk, obviously).
.
}

wr() {
	if test "$*"
	then
		fold -sw $LINEWIDTH | sed 's/[[:space:]]*$//'
	else
		{
			sep=
			while IFS= read -r line
			do
				printf %s%s "$sep" "$line"
				if test "$line"
				then
					sep=' '
				else
					echo
					test -z "$sep" && continue
					echo; sep=
				fi
			done
			test -z "$sep" || echo
		} | wr -s
	fi
}
MAXWITH=110
LINEWIDTH=`
	cmd=tput; command -v $cmd > /dev/null 2>& 1 \
	&& test -t 0 && $cmd cols \
	|| echo 66
`
test $LINEWIDTH -le $MAXWITH || LINEWIDTH=$MAXWITH

set -e
cleanup() {
	rc=$?
	test "$TDIR" && rm -r -- "$TDIR"
	test $rc = 0 || echo "$0 failed!" >& 2
}
TDIR=
trap cleanup 0
trap 'exit $?' HUP INT QUIT TERM

set_passphrase=false
bits=$default_bits
security_margin=50 # Overhead % added to the entropy actually required.
ppk_gen=false
while getopts peb:Vh opt
do
	case $opt in
		p) command -v puttygen > /dev/null; ppk_gen=true;;
		b) bits=$OPTARG;;
		e) set_passphrase=true;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

for n
do
	test "$n"
	test -d "`dirname -- "$n"`"
done

TDIR=`mktemp -d "${TMPDIR:-/tmp}/$APP".XXXXXXXXXX`

# Calculate additional bytes of entropy to provide for the last openssl
# invocation. This will be used to "re-charge" openssl's randomness seeding
# files to full entropy, making the entropy available to future invocations of
# openssl when no additional entropy sources might be available (such as
# immediately after reboot on a diskless system).
recharge_seeding_bytes=1024 # Assumed mininum size of openssl seeding file.
for i in "$HOME"/.rnd .rnd
do
	test -f "$i" || continue
	i=`stat -c %s -- "$i"`
	# Don't believe an unreasonably large file to be a seeding file.
	# Otherwise, a DoS attack might be possible by starving the system out
	# of entropy while waiting for /dev/openssl to yield enough entropy,
	# which can be a slow process.
	test "$i" -gt 150000 && continue
	test "$i" -le $recharge_seeding_bytes && continue
	recharge_seeding_bytes=$i
done
# Theoretically, only random starting positions for the sequential search of
# two primes would be required, $bits bits for both together. But we also add
# a security margin for overhead, expecting that openssl might internally
# consume entropy for other things than generating primes, too. For instance,
# it might generate random temporary filenames. Note that the optional
# encryption of the private key file is performed as a separate step using
# openssh-keygen and optionally puttygen later, not by openssl. So we do not
# need to provide entropy for private key encryption to openssl.
entropy_bytes=`expr \( $bits + 7 \) / 8 \* \( 100 + $security_margin \) / 100`
i=1
for n
do
	t=$TDIR/$i
	echo "Generating key '$n'..."
	e=$entropy_bytes
	if test $i = $#
	then
		# This will be the last invocation of openssl by this script.
		e=`expr $e + $recharge_seeding_bytes`
	fi
	echo "Collecting $e bytes of entropy..." >& 2
	dd if=/dev/random bs=1 count="$e" of="$TDIR"/rnd
	openssl genrsa -out "$t".prv -rand "$TDIR"/rnd "$bits"
	chmod 600 -- "$t".prv
	ssh-keygen -yf "$t".prv > "$t".tmp
	tr -d '\n' < "$t".tmp > "$t".pub
	rm -- "$t".tmp
	printf ' %s\n' "$n" >> "$t.pub"
	if $ppk_gen
	then
		(
			# Change temporarily to temporary directory in order
			# to avoid passing path names to puttygen which might
			# look like options (puttygen's non-standard syntax
			# makes it possible to misinterpret strange path names
			# as options).
			cd -- "$TDIR"
			puttygen $i.prv -C "$n" -o $i.ppk -O private
		)
	fi
	i=`expr $i + 1`
done
if $set_passphrase
then
	i=1
	for n
	do
		t=$TDIR/$i
		echo "Changing OpenSSH pass phrase for key '$n'..."
		ssh-keygen -pf "$t".prv
		if $ppk_gen
		then
			echo "Changing PuTTY pass phrase for key '$n'..."
			(
				cd -- "$TDIR" # See last comment about "cd".
				puttygen "$i".ppk -P
			)
		fi
		i=`expr $i + 1`
	done
fi
i=1
for n
do
	t=$TDIR/$i
	mv -i -- "$t".prv "$n.prv"
	mv -i -- "$t".pub "$n.pub"
	if $ppk_gen
	then
		mv -i -- "$t".ppk "$n.ppk"
	fi
	i=`expr $i + 1`
done
