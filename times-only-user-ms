#! /bin/sh
exit_version() {
	cat << ===; exit
$APP version 2025.88
Copyright (c) 2025 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}
APP=${0##*/}

exit_help() {
	cat << ===; echo; exit_version
$APP - display only the "user" time of commands in milliseconds

Usage 1:
$ (command_1 && command_2 ...; $APP)

Usage 2:
$ stm=`$APP` && command_1 && command_2 ...; expr `$APP` - $stm

Usage 3:
$ $APP -p <time_spec_1> ...

$APP invokes the "times" utility and parses its output. It extracts the user
time spent by child processes of the current shell, converts it to an integral
number of milliseconds and displays this value.

If the "-p" option is specified, the remaining arguments are expected to be
minute + seconds values just like displayed by "LC_NUMERIC=C times", and all
values will be parsed and converted into milliseconds. If no arguments are
actually specified and standard input is not a terminal, then the values to be
converted will be read from standard input instead.

Example:

$ (stress-ng --timeout=5s --cpu=`nproc`; $APP)

===
}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

parse_arguments=false
while getopts phV opt
do
	case $opt in
		p) parse_arguments=true;;
		V) exit_version;;
		h) exit_help;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

convert2ms() {
	expr "$1" : '[0-9]\{1,\}m[0-9]\{1,\}\.[0-9]*s$' > /dev/null
	m=`expr "$1" : '\([0-9]\{1,\}\)m' || :`
	s=`expr "$1" : '[^m]*m\([0-9]\{1,\}\)' || :`
	f=`expr "$1" : '[^.]*\.\([0-9]*\)s$' || :`
	if test ${#f} -gt 3
	then
		while test ${#f} != 4
		do
			f=${f%?} # Shorten fractional part to 4 decimal places.
		done
		f=`expr $f + 5` || : # Round.
		f=${f%?} # Shorten rounded fractional part to 3 decimal places.
		test "$f" || f=0
	fi
	expr \( $m \* 60 + $s \) \* 1000 + $f || :
}

if $parse_arguments
then
	if test "$ms" = 0 && test ! -t 0
	then
		while read ms
		do
			convert2ms "$ms"
		done
	else
		for ms
		do
			convert2ms "$ms"
		done
	fi
else
	test $# = 0
	LC_NUMERIC=C times | {
		read usr sys # Times of the shell.
		read usr sys # Times of the shell's children.
		convert2ms $usr
	}
fi
