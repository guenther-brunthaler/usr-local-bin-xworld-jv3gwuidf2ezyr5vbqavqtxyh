#! /bin/sh
exit_version() {
	wr -s << ===; exit
$APP Version 2022.227
Copyright (c) 2019-2022 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}
APP=${0##*/}

exit_help() {
	wr << ===
$APP - scan next page(s) and save as autonumbered TIFF file.

Usage: $APP [ <options> ... ]

Options:

-I: (upper-case 'i' like India) Disable interactive scanning mode, which is
enabled by default. In this interactive mode, an interactive prompt is shown
prior to scanning the first or next autonumbered page. When just pressing the
[Enter] key, the page is scanned, saved, and the prompt is shown again in
order to await scanning the next page. If any text such as "quit" is entered
before pressing [Enter], the script terminates instead. This option thus has
the same affect as running the command multiple times without the option.

-D <dpi>: Specify a different scanning resolution. The default resolution is
$dpi, which is also recommended for later using OCR on the scans.

-T: Don't remove unused empty border areas around the scan before saving it.

-r: Rotate the scan by 180 degrees before saving it.

-C: Don't try to convert the scanned image into losslessly LZW-compressed TIFF
format, but rather leave it as an uncompressed PNM. Use this if you have
plenty of free space on your disk and do not want to waste your time waiting
for LZW compression. Also used this if 'imagemagick' runs out of resources
while trying to convert very large images.

-d <digits>: Make the numbered counter in the saved files at least <digits>
decimal digits wide. Defaults to $digits. The actual counter value will have
at least this number of decimal digits, zero-padding it at the left if
shorter. Specifying <digits> explicitly can be used to make all file names the
same length, allowing them to be sorted by counter automatically when
displaying the file names sorted alphabetically.

-N <startcounter>: Set the starting value for the counter used to create the
sequence number in the created files. The default value without this option is
1. Note that $APP always checks whether an output file with the current value
already exists, and if so increments the counter until the resulting output
file will no longer overwrite any pre-existing file. In other words, $APP
never overwrites any existing files.

-g: Enable grayscale mode. By default, color scans will be made. B/W scans are
not supported by this script, because improper B/W-threshold settings and
`echo Moir+AOk- | iconv -f UTF-7` patterns might then require re-scanning the
same original later, which this script tries to avoid. While color scans
retain most information of the original image and thus reduce the chance of a
required re-scan to the minimum, graysale scans are nearly as effective for
avoiding re-scans and produce smaller saved files. The -g option is thus
useful when scanning a large number of pages which will be postprocessed into
B/W later anyway, potentially saving a lot of temporary storage space on disk.
If you just happen to scan no more than a few dozen pages, it is probably not
worth the effort to consider using -g or not. In addition, without option -g,
one can postpone the decision whether or not to convert a page into B/W. With
-g, the color information would be gone, and a re-scan would be necessary in
order to re-acquire it.

-G: Enable 16-bit grayscale mode. This is similar to -g, except that a depth
of 16 bit will be requested by the scanner. Not all scanners support this.

-L: Enable line art mode. Normally, this is not a good idea, because an
improper B/W threshold value used by the scanner hardware would produce
unusable scans. In those cases, using a color scan is best, and then apply
software algorithms to find out the best way to convert the image to B/W.
However, some scanner model apply adaptive thresholding algorithms themselves
and might therefore be able to deliver usable line art scans. For such scanner
models only, this option might actually be useful.

-o <options>: Pass additional custom options to the 'simplescan' program which
does the actual work, and for which $APP is just a command-line front end.
This can used to communicate scanner-model specific parameters to the scanner,
something a generic driver program like $APP cannot do. Run 'scanimage --help'
in order to get a listing of the model-specific options of your scanner model.

-n: Dry run. Show what low-level command for scanning and file conversion the
script would perform in the background, but don't actually run those commands.
Useful to understand what the script would do when run without this option.

-h: Display this help and exit.

-V: Display version information and exit.
===
	echo; exit_version
}

digits=3
outfmt='infile-%0${digits}u.%s'
toutext=pnm
foutext=tif
dpi=300
depth=8
out_opt='-type TrueColor -colorspace sRGB -depth $depth -compress LZW'

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

wr() {
	if test "$*"
	then
		fold -sw $LINEWIDTH | sed 's/[[:space:]]*$//'
	else
		{
			sep=
			while IFS= read -r line
			do
				printf %s%s "$sep" "$line"
				if test "$line"
				then
					sep=' '
				else
					echo
					test -z "$sep" && continue
					echo; sep=
				fi
			done
			test -z "$sep" || echo
		} | wr -s
	fi
}
LINEWIDTH=`
	cmd=tput; command -v $cmd > /dev/null 2>& 1 \
	&& test -t 0 && $cmd cols \
	|| echo 66
`

ck_posint() {
	expr x"$OPTARG" : x'[1-9][0-9]*$' > /dev/null
}

dry_run=false
mode=Color
trim=true
rotate180=false
interactive=true
custom_opts=
n=1
while getopts CLo:ID:Trd:N:gGnhV opt
do
	case $opt in
		I) interactive=false;;
		D) ck_posint; dpi=$OPTARG;;
		T) trim=false;;
		C) out_opt=;;
		r) rotate180=true;;
		d) ck_posint; digits=$OPTARG;;
		N) ck_posint; n=$OPTARG;;
		g) mode=Gray;;
		G) depth=16; mode="Gray --depth=$depth";;
		L) mode=Lineart;;
		o) custom_opts="$custom_opts $OPTARG";;
		n) dry_run=true;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

for u in util-linux: ionice flock imagemagick: convert sane-utils: scanimage
do
	case $u in
		*:) p=${u%:};;
		*)
			command -v $u > /dev/null 2>& 1 || {
				echo "Utility '$u' needs to be installed!"
				echo "For some Linux distributions," \
					"this is part of package '$p'."
				false || exit
			} >& 2
	esac
done

eval "outfmt=\"$outfmt\""

simrun() {
	$dry_run || return
	echo "SIMULATION: $*"
}

get_n() {
	while :
	do
		toutfile=`printf "$outfmt" $n "$toutext"`
		if test ! -e "$toutfile"
		then
			foutfile=`printf "$outfmt" $n "$foutext"`
			test ! -e "$foutfile" && break
		fi
		n=`expr $n + 1`
	done
}

process() {
	outfile=$foutfile; test -z "$out_opt" && outfile=$toutfile
	echo "Scanning to $outfile..." >& 2
	set scanimage --mode=$mode$custom_opts --resolution=$dpi --format=pnm
	simrun "$* > $toutfile" || "$@" > "$toutfile"
	test -z "$out_opt" && return

	set nice ionice -n 5 convert -units pixelsperinch -density $dpi
	$trim && set "$@" -trim
	$rotate180 && set "$@" -rotate 180
	set "$@" "$toutfile"`eval "printf ' %s' $out_opt"` "$foutfile"
	r="rm $toutfile"
	simrun "$* && $r &" || { { "$@" && $r; } & }
}

if $interactive
then
	while :
	do
		get_n
		printf '\n%s ' "[Enter] to scan # $n, EOF`
				:
			` (or any text + [Enter]) to quit?"
		line=; read line || { echo; break; }
		case $line in
			'') ;;
			*) break
		esac
		process
		n=`expr $n + 1`
	done
else
	get_n
	process
fi
