#! /bin/sh
show_version() {
	wr <<- .
	$APP version 11.200

	(c) 2009 - 2011 by Guenther Brunthaler.\n
	This source file is free software.\n
	Distribution is permitted under the terms of the GPLv3.
.
}
APP=${0##*/}


show_help() {
	wr <<- .
	tightvnc-via-local-ssh-forwarding - TightVNC via SSH tunnel
	
	Calls TightVNC with the right options in order to connect to an SSH
	server which is listening either at a local port, or is listening on a
	different machine but has its listening port forwarded to the local
	machine (i. e. via SSH).

	Usage: 	tightvnc-via-local-ssh-forwarding [ options ]
	
	options:
	
	--quality <quality>, -q <quality>:\n
	  Set JPEG quality. Defaults to $QUALITY.\n
	--compression <strength>, -c <strength>:\n
	  Set compression strength. Defaults to $COMPRESSION.\n
	--compatibility-mode, --compatibility, --compat, -C:\n
	  Assume the server does not understand the TightVNC protocol and use
	  maximum zlib compression as a fallback instead.\n
	--port <port>, -p <port>:\n
	  Set local port to connect to. Defaults to $PORT.\n
	--password-file <name>, -P <name>:\n
	  Password file to use, as created by vncpasswd.\n
	  Defaults to "$PWDFILE".\n
	  Specifying an empty password disables the default password usage.\n
	--help, -h: Display this help text.\n
	--verbose, -v: Verbose operation.\n
	--dry-run, --simulate, -n:\n
	  Just print what would be done, but don't actually do anything.\n
.
	println
	show_version
}


die() {
	{
		echo "ERROR: $*"
		echo "Use $APP --help for help."
	} >& 2
	false; exit
}


inform() {
	test -z "$VERBOSE" && return
	echo "$*"
}


run() {
	local TRY RC ALWAYS
	while true; do
		case "$1" in
			--) shift; break;;
			-try) TRY=1;;
			-always) ALWAYS=1;;
			*) break;;
		esac
		shift
	done
	if
		test -n "$DRY" && test -z "$ALWAYS"
	then
		echo "SIMULATION: $*"
	else
		"$@" && return
		RC=$?
		test -n "$TRY" && return $RC
		die "Command >>>$*<<< failed return code $RC!"
	fi
}


system() {
	REPLY=`run "$@"` || exit
}


println() {
	run printf '%s\n' "$*"
}


wr() {
	local REPLY
	while IFS= read -r REPLY
	do
		{
			while test -n "$REPLY" || IFS= read -r REPLY
			do
				ORIG=$REPLY; REPLY=${REPLY%\\n}
				println "$REPLY"
				test x"$ORIG" != x"$REPLY"  && break
				REPLY=
			done
		} | run fmt -w "$LINEWIDTH" || exit
	done
}
LINEWIDTH=; tty -s && LINEWIDTH=`tput cols` || LINEWIDTH=; : ${LINEWIDTH:=70}


# Start of command line processing.
# Define presets.
VERBOSE=
COMPAT=
DRY=
QUALITY=4
COMPRESSION=9
PORT=5900
PWDFILE="$HOME/.vnc/client_passwd"
#
COPTS=
while :
do
	if test -z "$COPTS"
	then
		case $1 in
			-?*) COPTS=$1; shift;;
			*) break;;
		esac
	fi
	if test x"${COPTS#--}" = x"$COPTS"
	then
		TAIL=${COPTS#-?}; # Switch clustering.
		COPT=${COPTS%$TAIL}; COPTS=${TAIL:+-}$TAIL
	else
		COPT=$COPTS; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case $COPT in
		--) break;; # Must be first!
		--quality | -q) QUALITY=$1; shift;;
		--compression | -c) COMPRESSION=$1; shift;;
		--port | -p) PORT=$1; shift;;
		--password-file | -P) PWDFILE=$1; shift;;
		--compatibility-mode | --compatibility | --compat | -C)
			COMPAT=Y;;
                --help | -h) show_help; exit;;
		--version | -V) show_version; exit;;
		--verbose | -v) VERBOSE=1;;
		--dry-run | --simulate | -n) DRY=1;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off ordinal arguments.
#test $# -ge 1 || die "Missing argument - limit for accumulated sum!"
#LIMIT="$1"; shift
# Check for excess arguments.
test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.
inform "Assumption: Local port $PORT has been forwarded (i. e. via SSH)"
inform "to remote TightVNC server."
VNCVIEWER=`which vncviewer 2> /dev/null`
if
	test -z "$VNCVIEWER" || test ! -f "$VNCVIEWER" \
	|| test ! -x "$VNCVIEWER"
then
	VNCVIEWER=/usr/bin/vncviewer
fi
run -always test -f "$VNCVIEWER"; run -always test -x "$VNCVIEWER"
run -always test "$PORT" -ge 5900
VNCDISPLAY=`expr $PORT - 5900`
run -always test "$VNCDISPLAY" -ge 0
set -- "$VNCVIEWER"
if
	"$VNCVIEWER" --help 2>& 1 | grep -qi TigerVNC
then
	# TigerVNC.
	test -n "$PWDFILE" && set -- "$@" --PasswordFile="$PWDFILE"
	if
		test -n "$COMPAT"
	then
		set -- "$@" --ZlibLevel=9
	else
		set -- "$@" --CompressLevel="$COMPRESSION" \
			--QualityLevel="$QUALITY"
	fi
	set -- "$@" --Shared=1 --AutoSelect=0 localhost:"$VNCDISPLAY"
elif
	"$VNCVIEWER" --help 2>& 1 | grep -qi TightVNC
then
	# TightVNC.
	test -n "$PWDFILE" && set -- "$@" --passwd "$PWDFILE"
	set -- "$@" -compresslevel "$COMPRESSION" -quality "$QUALITY" \
		-encodings "copyrect tight hextile" localhost::$PORT
else
	# Default: Plain VNC.
	test -n "$PWDFILE" && set -- "$@" --passwd "$PWDFILE"
	set -- "$@" -encodings "copyrect hextile" localhost::$PORT
fi
run exec "$@"
