#! /bin/sh
# Convert input or arguments into a non-standard extension of the well-known
# "tap code" (which uses a 5 x 5 grid).
#
# The extended code uses a 6 x 6 grid instead, consisting of all the
# alphabetic characters first, followed by the digits 0 through 9.
#
# Other than the original code, the extended code can encode decimal digits
# directly, there is no difference between the German and English version, and
# no need to map the letters "I", "J", "C" and "K" in any way.
#
# Version 2020.11
# Copyright (c) 2019-2020 Guenther Brunthaler. All rights reserved.
#
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

process() {
	awk -f /dev/fd/5 5<< EOF

# Set up: outr[], outc[]
function init(    al, aln, ch, r, c) {
	al= "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	aln= length(al)
	for (r= c= i= 1; i <= aln; ++i) {
		ch= substr(al, i, 1)
		if ($show_table) {
			if (c > 1) printf " "
			printf "%s", ch
		}
		outr[ch]= r; outc[ch]= c
		ch= tolower(ch)
		outr[ch]= r; outc[ch]= c
		if (++c > 6) {
			c= 1; ++r
			if ($show_table) print ""
		}
	}
	if ($show_table) exit
}

function tap_number(n    , out, sep) {
	while (n--) {out= out sep "*"; sep= " "}
	print out
}

function tap_word(s    , sl, i, ch) {
	if (first) print ""; else first= 1
	sl= length(s)
	for (i= 1; i <= sl; ++i) {
		if ((ch= substr(s, i, 1)) in outr) {
			tap_number(outr[ch])
			tap_number(outc[ch])
		}
	}
}

BEGIN {init()}

/[[:graph:]]/ {for (i= 1; i <= NF; ++i) tap_word(\$i)}
	
EOF
}

show_table=0
while getopts t opt
do
	case $opt in
		t) show_table=1;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

case $# in
	0) process;;
	*)
		for arg
		do
			printf '%s\n' "$arg"
		done | process
esac
