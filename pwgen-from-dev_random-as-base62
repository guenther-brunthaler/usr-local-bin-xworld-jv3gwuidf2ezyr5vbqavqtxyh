#! /bin/sh
exit_version() {
	cat << EOF; exit
$APPLICATION_NAME version 2019.96

Copyright (c) 2017-2019 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
EOF
}

exit_help() {
	cat << EOF; echo; exit_version # Text width: 66 columns.
$APPLICATION_NAME - generate cryptographically secure random
passwords

Usage: $APPLICATION_NAME [ <options> ... ] <bit_strength> \\
       [ < <random_source> ]

By default, $APPLICATION_NAME reads high-quality binary random
bytes (with full entropy) from /dev/random and displays them as
base-62 ASCII passwords.

The required password strength in bits must be specified as an
argument, popular values are 128, 192, 224, 256, 384, 512 or
1024. Larger means more secure. But values larger than 256
probably make no sense because no-one will ever be able to crack
it. Not even with quantum computers.

Values lower than 96 should generally be avoided because of the
danger of brute-force attacks.

I recommend the value 256 (quantum computer safe) for long-term
passwords and 128 for short- and medium-term passwords (which
will expire before quantum computer attacks are likely become
feasible, that is, let's say, within 3 years in order to be
pessimistic).

In this context, "password strength" means that the generated
passwords will require the same effort of brute-force guessing as
a binary cryptographic key of that bit length.

If standard input is a terminal or /dev/null, $APPLICATION_NAME
will get the required high-quality random bytes from /dev/random.

If anything else has been redirected to $APPLICATION_NAME as its
standard input, it is assumed to be some sort of random-number
device, and the required random bytes will be read from there.

For instance, redirecting from /dev/urandom implements a
non-blocking version of $APPLICATION_NAME. This will no longer
guarantee that the generated passwords have full entropy, but
$APPLICATION_NAME will never block and always return a password
immediately.

Another useful alternative might be redirecting from /dev/hwrng,
assuming the device node for a hardware random number generator
has been placed there.

In any case, the generated password will only use characters from
the following 62-character alphabet: A-Z, a-z, 0-9.
EOF
}
APPLICATION_NAME=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

baseconv() {
	awk -v failure_rc=`false || echo $?` -f /dev/fd/5 -- "$@" \
5<< 'AWK_END'

# Set up: r2a[], a2r[]
function init(    ranges, i, c) {
	ranges=	"0123456789" \
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ" \
		"abcdefghijklmnopqrstuvwxyz"
	for (i= length(ranges); i; --i) {
		r2a[i]= c= substr(ranges, i, 1); a2r[c]= i
	}
}

function die(msg) {
	print msg > "/dev/stderr"
	exit(failure_rc)
}

function ranges2tables(adef, a2dig, dig2a    , i, e, afrom, ato, dig) {
	e= length(adef) - 1
	dig= 0
	for (i= 1; i <= e; i+= 2) {
		afrom= substr(adef, i, 1)
		ato= substr(adef, i + 1, 1)
		for (;;) {
			a2dig[afrom]= dig
			dig2a[dig++]= afrom
			if (afrom == ato) break
			afrom= r2a[a2r[afrom] + 1]
		}
	}
	return dig
}

function convert(inp    , dig, out, carry, nid, k, i, n) {
	nid= length(inp)
	for (k= 1; k <= nid; ++k) {
		for (i= 0; i < n; ++i) {
			dig[i]= (carry+= dig[i] * in_base) % out_base
			carry= int(carry / out_base)
		}
		while (carry) {
			dig[n++]= carry % out_base
			carry= int(carry / out_base)
		}
		# dig += digit
		if (!((carry= substr(inp, k, 1)) in in_a2dig)) {
			die( \
				"Invalid base-" in_base " digit" \
				" \"" carry "\"" \
				" in input number \"" inp "\"!" \
			)
		}
		carry= in_a2dig[carry]
		for (i= 0; i < n; ++i) {
			dig[i]= (carry+= dig[i]) % out_base
			carry= int(carry / out_base)
		}
		while (carry) {
			dig[n++]= carry % out_base
			carry= int(carry / out_base)
		}
	}
	for (i= min_width - n; i > 0; --i) out= out out_dig2a[0]
	while (n--) out= out out_dig2a[dig[n]]
	print out
}

# Set up: in_base, in_a2dig[], out_base, out_dig2a[], min_width
function main(    i, t) {
	in_base= ranges2tables(ARGV[2], in_a2dig, t)
	for (i in t) delete t[i]
	out_base= ranges2tables(ARGV[3], t, out_dig2a)
	for (i in t) delete t[i]
	i= log(2 ^ ARGV[1]) / log(out_base)
	if ((min_width= int(i)) != i) ++min_width
	ARGC= 1
}

BEGIN {init(); main()}

{convert($0)}

AWK_END
}

while getopts Vh opt
do
	case $opt in
		V) exit_version;;
		h) exit_help;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

devinfo() {
	# File type and major/minor device numbers in case of a device.
	ls -Lnod -- "$1" | cut -d " " -f 1,4-5 | cut -c 1,12-
}

test -e /dev/stdin
if test -t 0 || test "`devinfo /dev/stdin`" = "`devinfo /dev/null`"
then
	d=/dev/random
	test -c "$d"
	exec < "$d"
fi
bytebits=`getconf CHAR_BIT`

test $# -le 1
wantbits=${1:?"Please specify bit strength of the password, e.g. 256"}
expr x"$wantbits" : x'[1-9][0-9]*$' > /dev/null
needbytes=`expr \( $wantbits + $bytebits - 1 \) / $bytebits`
dd bs=1 count=$needbytes 2> /dev/null | od -vbA n | tr -dc 0-7 \
| baseconv $wantbits 09 AZaz09
