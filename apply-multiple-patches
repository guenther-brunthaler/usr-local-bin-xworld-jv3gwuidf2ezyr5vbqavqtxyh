#!/bin/sh


usage() {
	local APP
	APP=${0##*/}
	cat <<- EOT
	$APP - apply one or more patch files
	
	$APP takes a couple of patch files
	as its argument and tries to apply each of them
	to the current directory (or the directory specified
	with a -d option).
	
	The file name extensions of the patch files are examined
	and if they match any of the following patterns
	
	.gz
	.bz2
	
	they will be unpacked on the fly before being applied.
	
	Also, each patch file will be applied with -p0 first,
	and if this did not work, -p1 through -p5 are also
	tried.
	
	If any of the patch files did not apply cleanly enough
	(that is, rejected were issued), no changes are made
	and the tool exits with a return code of 1.
	
	Usage: $APP [ options ...]
	  [ -- ] <patch_files> ...

	<patch_files>:
	  A list of files to be applied in the order they are
	  specified in the command line. When using shell
	  wildcards, the shell will typically sort them
	  lexicographically based on the current locale before
	  the resulting list of filenames replaces the shell
	  pattern on the command line.

	options:
	--tmpdir <directory>, -t <directory>:
	  Normally, any packed patch files which will be
	  unpacked automatically will be saved as temporary
	  files in /tmp rather unpacked via pipes.
	  This is done to speed up the process, as
	  each patch file will be read at least twice. But
	  a small /tmp directory might lead into trouble with
	  very large patch files.
	  For this reason, this option allows to define
	  a temporary directory other than /tmp.
	  Alternatively, the environment variable \$TMPDIR
	  will be used for the same purpose if it is set.
	--help, -h: Display this help text.
	--verbose, -v: Verbose operation.
	--dry-run, --simulate, -n:
	  Just print what would be done, but don't actually
	  do anything.

	Caveats:
	  In order to determine whether all the patches can
	  be applied cleanly, and due to the fact that it
	  might be necessary to try multiple patch '-p' options
	  before succeeding, each patch might actually be
	  attempted multiple times before it is finally applied.

	Version 12.288
	Copyright (c) 2007-2012 Guenther Brunthale. All rights reserved.
	EOT
}
                                                                                                                             

die() {
	{
		echo "ERROR: $*"
		echo "Use '${0##*/} --help' for help."
	} >& 2
	exit 1
}


inform() {
	test -z "$VERBOSE" && return
	echo "$*"
}


run() {
	local TRY RC
	TRY=
	while true; do
		case $1 in
			--) shift; break;;
			-try) TRY=1;;
			*) break;;
		esac
		shift
	done
	if [ -n "$DRY" ]; then
		echo "SIMULATION: $*"
	else
		${1+"$@"} && return
		RC=$?
		test -n "$TRY" && return $RC
		die "Command >>>$*<<< failed return code $RC!"
	fi
}


# Start of command line processing.
# Define presets.
VERBOSE=
DRY=
CHECK_INTERVAL=120
INITIAL_WAIT=60
#
COPTS=
while true; do
	if [ -z "$COPTS" ]; then
		case $1 in
			-?*) COPTS=$1; shift;;
			*) break;;
		esac
	fi
	if [ "${COPTS#--}" = "$COPTS" ]; then
		TAIL=${COPTS#-?}; # Switch clustering.
		COPT=${COPTS%$TAIL}; COPTS=${TAIL:+-}$TAIL
	else
		COPT=$COPTS; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case $COPT in
		--) break;; # Must be first!
                --help | -h) usage; exit;;
		--tmpdir | -t) TMPDIR=$1; export TMPDIR; shift;;
		--version)
			# Sychronize this with the usage text!
			echo "Version 1.0"
			exit;;
		--verbose | -v) VERBOSE=1;;
		--dry-run | --simulate | -n) DRY=1;;
		*) die "Unknown option '$COPT'!";; # Must be last!
	esac
done
# Shift off ordinal arguments.
#test $# -ge 1 && { CHECK_INTERVAL=$1; shift; }
#test $# -ge 1 || die "Missing argument - limit for accumulated sum!"
#LIMIT="$1"; shift
# Check for excess arguments.
#test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.


# $1: filename to check.
# $2: if set: filename to unpack to
# If $2 is unset: Return true if file extension suggests
# that the file is packed.
unpack_check() {
	case $1 in
		*.gz)
			test -z "$2" ||	run gzip -dc "$1" > "$2"
			;;
		*.bzip2 | *.bz2)
			test -z "$2" ||	run bzip2 -dc "$1" > "$2"
			;;
		*)
			false
			return
			;;
	esac
	inform "Unpacked '$1' as '$2'."
}


# Clean up temporary files.
cleanup() {
	test -n "$ARG_DIR" && echo rm -r "$ARG_DIR"
}


# Populate $ARG_DIR with either unpacked argument files
# or symlinks to the original files (or copies if symlinks
# do not work).
# The generated files/symkinks will have the names
# $ARG_DIR/$N.patch
# $ARG_DIR/$N.patchfile
# where $N is a numeric prefix ordered like "$@".
unpack_arguments() {
	local CNT A OUT
	CNT=1
	run mkdir "$ARG_DIR/.dir"
	for A in "$@"; do
		OUT=`printf "%s/%08u" "$ARG_DIR" $CNT`
		CNT=`expr $CNT + 1`
		printf "%s\n" $A > "$OUT.patchfile"
		OUT=$OUT.patch
		unpack_check "$A" "$OUT" || {
			ln -sn "$A" "$OUT" 2> /dev/null \
				|| run cp -d "$A" "$OUT"
			
		}
	done
}


test $# -ge 1 || inform "Note: No patch files have been specified."
ARG_DIR=
trap cleanup 0
for F in "$@"; do
	if unpack_check "$F"; then
		ARG_DIR=`mktemp -dt "${0##*/}-XXXXXXXXXX"`
		unpack_arguments ${1+"$@"}
		break
	fi
done
