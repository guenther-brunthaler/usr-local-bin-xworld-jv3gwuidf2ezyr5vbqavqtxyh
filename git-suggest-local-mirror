#! /bin/sh
# Suggest the path of a local "--bare" mirror for the current git repository.
#
# Version 2018.88
#
# Copyright (c) 2018 Guenther Brunthaler. All rights reserved.
# 
# This script is free software.
# Distribution is permitted under the terms of the GPLv3.

set -e
trap 'test $? = 0 || echo "$0 failed!" >& 2' 0

make=false
mk_alt=false
remote=local
setremote=false
push=false
optimize=false
opt_util=git-minimize-repo
while getopts poamrR:pa opt
do
	case $opt in
		a)
			setremote=true; mk_alt=true; make=true; push=true
			optimize=true
			;;
		r) setremote=true;;
		R) setremote=true; remote=$OPTARG;;
		a) mk_alt=true;;
		m) make=true;;
		p) push=true; test "$remote" || remote=$defrem;;
		o) optimize=true;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

repo_uuid() {
	git log --no-merges | sed '
		s/^\(.* \)*[Nn]ew //; t br
		s/^\(.* \)*[Uu]pdate //; t br
		s/^\(.* \)*[Ii]nitial //; t br
		d
		: br
		s/^branch //; t wi; d
		: wi
		s/^with //; t new
		: new
		s/^new //; t uu
		: uu
		s/^UUID[=:]* //; t b35; d
		: b35
		s/^\([0-9a-np-z]\{25\}\)\( .*\)*$/\1/; t found; d
		: found
		q
	'
}

UUID=`repo_uuid` && test "$UUID" || {
	echo "Please add a UUID to your git log msg" >& 2
	false || exit
}

test -n "$HOME"

home=${HOME%%/}
git=`pwd`
rel=${git#"$home"}
if test "$git" = "$rel"
then
	home=`readlink -f -- "$HOME"`
	agit=`readlink -f -- "$git"`
	rel=${agit#"$home"}
	test "$agit" = "$rel" && rel=
fi

defsub=srv
defsub2=scm
defsub3_opt=git
defsub4=public
defsub5=fsroot

if test "$rel"
then
	# $XDG_DATA_HOME defines the base directory relative to which user
	# specific data files should be stored. If $XDG_DATA_HOME is either
	# not set or empty, a default equal to $HOME/.local/share should be
	# used.
	: ${XDG_DATA_HOME:="$HOME"/.local/share}

	while defbase=`dirname -- "$XDG_DATA_HOME"`
	do
		for base in "$XDG_DATA_HOME" "$defbase" "$HOME"
		do
			base=$base/$defsub
			test -d "$base" && break 2
		done
		base=$defbase/$defsub
		break
	done
	t=$base/$defsub2 && test -d "$t" && base=$t \
	&& t=$t/$defsub3_opt && test -d "$t" && base=$t
	test -d "$base" || base=$base/$defsub2
	git=$base$rel
else
	while defbase=/$defsub
	do
		for base in "$defbase" /var /var/lib/
		do
			base=$base/$defsub2
			test -d "$base" && break 2
		done
		base=$defbase
		break
	done
	t=$base/$defsub3_opt && test -d "$t" && base=$t
	t=$base/$defsub4 && test -d "$t" && base=$t \
	&& t=$t/$defsub5 && test -d "$t" && base=$t
	test -d "$base" || base=$base/$defsub4/$defsub5
	git=$base$git
fi
git=$git-$UUID.git

printf '%s\n' "$git"
if $make
then
	if test -e "$git"
	then
		echo "Directory already exists!" >& 2
		false || exit
	else
		mkdir -p -- "`dirname -- "$git"`"
		git init --bare -- "$git"
	fi
fi
if $mk_alt
then
	ab=.git/objects/info
	alt=$ab/alternates
	test -d "$ab"
	echo "Setting as alternates for current git directory..."
	printf '%s\n' "$git"/objects >> "$alt"
	LC_COLLATE=C sort -o "$alt" -u -- "$alt"
fi
if $setremote
then
	test "$remote"
	echo "Setting mirror as remote '$remote'..."
	git remote add "$remote" "$git" \
	|| git remote set-url "$remote" "$git"
	git config --local remote.local.push 'refs/heads/*:refs/heads/*'
	git config --local branch.master.remote "$remote"
	git config --local branch.master.merge refs/heads/master
fi
if $push
then
	git push "$remote"
fi
if $optimize
then
	(cd "$git" && "$opt_util")
	"$opt_util"
	find .git/objects
fi
