#! /bin/sh
show_version() {
	wr . <<- EOF
	$APP Version 13.72
	Copyright (c) 2008-2013 Guenther Brunthaler. All rights reserved.

	This script is free software.
	Distribution is allowed under the terms of the GPLv3.
	EOF
}


show_help() {
	wr <<- EOF
	$APP - create "series" file from "series.guards" template

	$APP takes a "series.guards" file and expands a "series" file from it
	using the "guard" tool.

	Usage: $APP [ options ]

	options:

	--help, -h: Display this help text.

	--host <fqdn>, --override-host <fqdn>, --machine <fqdn>, -m <fqdn>:
	Override the fully qualified default domain name of the current host
	machine, using the specified instead. Useful for testing expansion of
	the "$SERIES_GUARDS" file for a different machine.

	--CHOST <chost>: Override the host triple specifying the current
	machine platform. This is a string like "x86_64-pc-linux-gnu".

	--check, -c: Check the validity of the "$SERIES_GUARDS" file instead
	of expanding the "$SERIES" file from it. Will typically detect files
	that are missing or unused.

	--series-file <path>, -s <path>: Override the default location
	("$SERIES") for the 'series' file which contains the list of patches
	to be applied (patch paths are relative to the top-level directory
	from where the patches will be applied). Note that this file will be
	overwritten if it already exists.

	--series-guards-file <path>, -g <path>: Override the default location
	("$SERIES_GUARDS") for the template file which will be expanded using
	the 'guards' tool giving the actual 'series' file to be used. The
	output of the expansion will be written to the 'series' file
	("$SERIES" or whatever has been specified for the
	'--series-file'-option).

	--version: Display version information.

	The "guard" tool is part of the "quilt" patch queue manager
	distribution and works like a simple macro preprocessor.

	In normal operation, $APP runs the "guard" tool, feeding it
	"$SERIES_GUARDS" as input and letting it create "$SERIES" as its
	output.

	The "$SERIES_GUARDS" consists of a list of patch files which might be
	prefixed with conditions. Those conditions determine whether a patch
	file is passed through to the "$SERIES" file or is discarded on
	output.

	The conditions are of the form +symbol, -symbol etc. (see the "guards"
	documentation for details) which pass through patch filenames
	depending on whether or not a specific symbol is defined or not.

	$APP automatically defines a list of symbols to be checked against
	based on the fully qualified (default) domain name of the host
	machine.

	To be more specific, it generates the current host's fully qualified
	(default) domain name as a symbol, as well as all of its superdomains.

	For instance, if the current machine has the FQDN
	"gateway2.mars.hyperspace.example.com", then the following
	symbols will be defined:

	EOF
	wr . <<- EOF
	* gateway2.mars.hyperspace.example.com
	* mars.hyperspace.example.com
	* hyperspace.example.com
	* example.com
	* com
	EOF
	wr <<- EOF

	In addition to those symbols, a number of additional symbols will be
	defined which represent other import aspects of the machine
	configuration.

	In the case of the local machine, the following symbols are currently
	defined:

	EOF
	enum_tokens display_tokens
	echo
	show_version
}


die() {
	echo "ERROR: $*" >& 2
	false; exit
}


run() {
	"$@" && return
	die "Failed executing >>>$*<<<: Return code ${?}!"
}


system() {
	REPLY="`run "$@"`" || exit
}


# Wrap stdin or arguments to $LINEWIDTH characters.
# If $1 is ".", wrap only but do not fill paragraphs.
wr() {
	local S
	S=
	if test x"$1" = x"."
	then
		S=-s; shift
	fi
	if test $# -gt 0
	then
		run printf '%s\n' "$*" | wr
	else
		run fmt $S -w $LINEWIDTH
	fi
}
LINEWIDTH=; REPLY=; tty -s <& 1 && system tput cols; LINEWIDTH=${REPLY:-70}


enum_tokens() {
	local CALLBACK FQ SUPER CHOST
	CALLBACK=$1
	if test -z "$FQDN"
	then
		set -- --version 2 \
			--namespace default_fqdn_7j3gzlr5fqubs0u8t1epwdkkh \
			FQDN
		. /usr/local/bin/xworld/functions/lookup.sh
	fi
	FQ=$FQDN
	set --
	while test -n "$FQ"
	do
		set -- "$@" "$FQ"
		SUPER=${FQ#*.}
		if test "$SUPER" = "$FQ"
		then
			FQ=
		else
			FQ=$SUPER
		fi
	done
	if test -z "$CHOST"
	then
		CHOST=${PORTAGE_CONFIGROOT%%/}
		CHOST=$CHOST/etc/portage/make.conf
		if
			test -f "$CHOST" \
			&& CHOST=`
				. "$CHOST" \
				&& printf '%s\n' "$CHOST"
			` \
			&& test -n "$CHOST"
		then
			:
		elif which libtoolize > /dev/null 2>& 1
		then
			CHOST=`
				s='[[:space:]]*'
				LC_ALL=C libtoolize --help \
				| LC_ALL=C sed -e "
					s,^${s}host-triplet:$s,,
					t
					d
				"
			`
		else
			set -- --version 2 \
				--namespace chost_hmtazpqmcf8kstyaqzw93nchg \
				CHOST --stop "$@"
			. /usr/local/bin/xworld/functions/lookup.sh
		fi
		test -n "$CHOST" || die 'Could not determine $CHOST!'
	fi
	set -- "$@" "$CHOST" "${CHOST%%-*}"
	$CALLBACK "$@"
}


display_tokens() {
	local TOKEN
	for TOKEN
	do
		wr . "* $TOKEN"
	done
}


main() {
	run test -f "$SERIES_GUARDS"
	if test -n "$CHECK"
	then
		set -- --check "$@"
	else
		exec > "$SERIES"
	fi
	run guards "$@" < "$SERIES_GUARDS"
}


APP=${0##*/}
# Start of command line processing.
# Define presets.
FQDN=
CHOST=
CHECK=
SERIES=series
SERIES_GUARDS=$SERIES.guards
#
COPTS=
while true; do
	if test -z "$COPTS"
	then
		case $1 in
			-?*) COPTS=$1; shift;;
			*) break
		esac
	fi
	if test x"${COPTS#--}" = x"$COPTS"
	then
		TAIL=${COPTS#-?}; # Switch clustering.
		COPT=${COPTS%$TAIL}; COPTS=${TAIL:+-}$TAIL
	else
		COPT=$COPTS; COPTS=
	fi
	# Any arguments are at $1 and onwards; must be shifted off.
	case $COPT in
		--) break;; # Must be first!
		--help | -h) show_help | less --quit-if-one-screen; exit;;
		--host | --override-host | --machine | -m)
			FQDN=$1; shift
			;;
		--CHOST) CHOST=$1; shift;;
		--version) show_version; exit;;
		--check | -c) CHECK=1;;
		--series-file | -s) SERIES=$1; shift;;
		--series-guards-file | -g) SERIES_GUARDS=$1; shift;;
		*) die "Unknown option '$COPT'!" # Must be last!
	esac
done
# Shift off ordinal arguments.
test $# -ge 1 && { WORKDIR=$1; shift; }
#test $# -ge 1 || die "Missing argument - limit for accumulated sum!"
#LIMIT="$1"; shift
# Check for excess arguments.
test $# = 0 || die "Unexpected excess arguments: $*"
# End of command line processing.

enum_tokens main
