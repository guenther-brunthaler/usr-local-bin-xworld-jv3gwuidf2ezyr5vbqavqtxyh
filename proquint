#! /bin/sh
exit_version() {
	cat << ====; exit
$APP version 2025.126
Copyright (c) 2025 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
====
}

exit_help() {
	cat << ====; echo; exit_version # Target: 66 characters per line
$APP - convert binary input into "Pronouncable Quintuplets"

Usage: $APP [ <options> ... ] [ <chars_per_word> ]

$APP reads binary octets (8-bit bytes)
from standard input and converts them into "Pronouncable
Quintuplets" ("proquints") or into a variation of those.

The binary octets are usually a cryptographic key, a
cryptographic hash or random bytes.

They will be converted into a pronouncable pass phrase made of
multiple words with the same number of letters.

Standard input is read as a bitstream made of blocks with (4, 2,
..., 4, 2, 4) bits which produces the next output word:

* Every 4-bit block is converted into a consonant
* Every 2-bit block is converted into a vowel

The produced words always start and end with a consonant. Within
the word, consonants and vowels occur alternating.

Genuine proquints always consume 16-bit blocks for every word
emitted, and produce words consisting of 5 letters.

The only and optional argument is the number of letters in the
produced output words. It must be an odd number >= 3. Default is
5 characters, which produces genuine proquints.

If standard input does not provide the exact number of bits
required to produce the final output word, the final partial
output word is silenly dropped. See the -v option.

Options:

-r: Reverse operation. Rather than converting binary data into
proquints, accept proquints as input and output the resulting
binary octets instead. Only whole octets will be output. If there
are less than 8 trailing output bits left after decoding, those
bits will be silently discarded.

-d "<delimiter>": Set string <delimiter> which will be used to
separate the generated output will. Defaults to a dash ("-"). It
is also possible to set this to an empty string.

-s: Set a space character as the word delimiter.

-v: Enable verbose mode. Default: Off. If enabled, will report if
any trailing input data has been ignored of if a partial final
output word has been omitted.

-h: Show this help and exit.

-V: Show version information and exit.
====
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

delimiter='-'
verbose=0
revert=false
while getopts rd:svhV opt
do
	case $opt in
		r) revert=true;;
		d) delimiter=$OPTARG;;
		s) delimiter=' ';;
		v) verbose=1;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

if $revert
then
	maxcols=`getconf LINE_MAX` && test "$maxcols" || maxcols=80
	fold -w "$maxcols" \
	| awk \
		-v verbose=$verbose \
		-f /dev/fd/5 \
		-f /dev/fd/6 \
	5<< 'EO_REVERSION' | sed 's/./\\&/g' | xargs printf %b

# Globals: letters[], vw[], cn[], b2o_esc[], inbuf.

BEGIN {	setup_lookup() }

function setup_lookup(    b) {
	setup_alphabets()
	revert_lookup(letters, cn)
	revert_lookup(letters, vw)
	mk_b2o_esc()
}

function mk_b2o_esc(    b) {
	for (b = 256; b--; ) b2o_esc[v2b(b, 8, 128)] = sprintf("\\%03o", b)
}

function revert_lookup(inv, map    , k) {
	for (k in map) inv[map[k]] = k
}

{ revert($0) }

function revert(chars    , cl, i) {
	cl = length(chars)
	for (i = 1; i <= cl; ++i) {
		inbuf = inbuf letters[substr(chars, i, 1)]
		while (length(inbuf) >= 8) {
			print b2o_esc[substr(inbuf, 1, 8)]
			inbuf = substr(inbuf, 1 + 8)
		}
	}
}

END { check_trailing_input_bits() }

EO_REVERSION

else
	od -vt o1 \
	| awk \
		-v wsep="$delimiter" \
		-v wordchars="${1:-5}" \
		-v verbose=$verbose \
		-f /dev/fd/5 \
		-f /dev/fd/6 \
	5<< 'EO_CONVERSION'

# Globals: bits_needed, wsep, wordchars, i, o2b[], cn[], vw[], inbuf, outbuf,
# nonfirst.

BEGIN {
	if (wordchars % 2 == 0) {
		die("The number of characters per word must be odd!")
	}
	if (wordchars < 3) {
		die("The number of characters per word must be >= 3!")
	}
	mk_o2b()
	setup_alphabets()
	bits_needed = 4
}

{ for (i = 2; i <= NF; ++i) process_octet($i) }

END {
	if (nonfirst) print ""
	if (verbose && outbuf != "") {
		printf "Incomplete final output word '%s' suppressed.\n" \
			, outbuf > "/dev/stderr"
	}
	check_trailing_input_bits()
}

function die(emsg) {
	print emsg > "/dev/stderr"
	exit system("false")
}

function mk_o2b(    octdigit) {
	for (octdigit = 8; octdigit--; ) {
		o2b[octdigit] = v2b(octdigit, 3, 4)
	}
}

function process_octet(octal    , ocnt, i, nc) {
	for (i = 1; i <= 3; ++i) {
		nc = o2b[substr(octal, i, 1)]
		if (i == 1) nc = substr(nc, 2)
		inbuf = inbuf nc
		while (length(inbuf) >= bits_needed) {
			if (bits_needed == 4) {
				outbuf = outbuf \
					cn[substr(inbuf, 1, bits_needed)]
			} else {
				outbuf = outbuf \
					vw[substr(inbuf, 1, bits_needed)]
			}
			inbuf = substr(inbuf, 1 + bits_needed)
			if (length(outbuf) == wordchars) {
				if (nonfirst) outbuf = wsep outbuf
				else nonfirst = 1
				printf "%s", outbuf
				outbuf = ""
				bits_needed = 4
			} else {
				bits_needed = bits_needed == 4 ? 2 : 4
			}
		}
	}
}

EO_CONVERSION

fi 6<< 'EO_COMMON'

function setup_alphabets() {
	al2arr(cn, "bdfghjklmnprstvz")
	al2arr(vw, "aiou");
}

function al2arr(array, alphabet    , n, i, msb, bits) {
	n = length(alphabet)
	for (bits = msb = 1; ; msb = i) {
		i = msb + msb
		if (i >= n) break
		++bits
	}
	for (i = 1; i <= n; ++i) {
		array[v2b(i - 1, bits, msb)] = substr(alphabet, i, 1)
	}
}

function v2b(value, bits, msb    , binary, bit) {
	# if (msb != 2 ^ (bits - 1)) exit 100
	while (bits--) {
		if (bit = value >= msb) value -= msb
		binary = binary bit
		value += value
	}
	return binary
}

function check_trailing_input_bits() {
	if (verbose && inbuf != "") {
		printf "Insufficient trailing input bits '%s' ignored.\n" \
			,  inbuf > "/dev/stderr"
	}
}

EO_COMMON
